/*
题意：给出10^5个点，如果两个点是friends，那么以两个点连线为对角线的矩形里或边界上没有其他点，问有几对
看那张树状数组的图，再自己画几个点，
树状数组套单调队列，真是神奇，
我们先算每个点作为矩形的右下端点时会有几对，
先对每个点按y值从大到小sort，
大概的说就是能形成对的一定是靠近这个点周围的那些点，
而且这些在当前点左边的点形成了一个单调序列，
由于之前插入的点都是y值比当前大的，所以一定要满足单调，
问题在于计算有多少个点，
问题的关键在于，怎么排除这样的点(x,y)，
就是存在另外一个点(x1,y1)，使得x<x1但是y>y1的点，
树状数组的每个节点记录一个单调队列，插入的时候把上面那种点都更新掉，
每次sum的时候继续排除那种点就行了，
复杂度nlogn^2?
*/
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<string>
using namespace std;
typedef long long ll;
#define eps 1e-8
const int inf=0x3fffffff;
const int maxn=100005;

int n,m,L[maxn];
ll ret;

struct brr
{
    int x,y;
    bool operator<(const brr &t)const
    {
        return y>t.y||y==t.y&&x<t.x;
    }
} a[maxn],stack[maxn*70],*c[maxn];

struct crr
{
    int *i,v;
    bool operator<(const crr &t)const
    {
        return v<t.v;
    }
} p[maxn];

void init()
{
    scanf("%d",&n);
    for(int i=1; i<=n; i++)
    {
        scanf("%d%d",&a[i].x,&a[i].y);
        p[i].v=a[i].x;
        p[i].i=&a[i].x;
    }
    sort(p+1,p+n+1);
    p[0].v=-inf,m=0;
    for(int i=1; i<=n; i++)
    {
        if(p[i].v!=p[i-1].v)m++;
        else ret--;
        *p[i].i=m;
    }
    int tmp=0;
    for(int i=1; i<=m; i++)
    {
        c[i]=&stack[tmp];
        tmp+=(i&(-i))+5;
    }
}

void add(int x,int y)
{
    int tx=x;
    while(x<=m)
    {
        // printf("**\n");
        while(L[x]&&c[x][L[x]].x<=tx)L[x]--;
        c[x][++L[x]].x=tx;
        c[x][L[x]].y=y;
        x+=(x&-x);
    }
}

int sum(int x)
{
    int ret=0,t=inf;
    while(x)
    {
        // printf("**\n");
        int l=1,r=L[x];
        if(r&&c[x][r].y<t)
        {
            int ans=0;
            while(l<=r)
            {
                int m=l+r>>1;
                if(c[x][m].y>=t)
                {
                    ans=m;
                    l=m+1;
                }
                else r=m-1;
            }
            t=c[x][L[x]].y,ret+=L[x]-ans;
        }
        x-=(x&-x);
    }
    return ret;
}

void solve()
{
    for(int i=1; i<=m; i++)L[i]=0;
    for(int i=1; i<=n; i++)
    {
        // printf("**\n");
        ret+=sum(a[i].x);
        // printf("**\n");
        add(a[i].x,a[i].y);
        //printf("**\n");
    }
}

int main()
{
    // freopen("in.cpp","r",stdin);
    init();

    //printf("** %d\n",m);

    sort(a+1,a+n+1);
    solve();

    a[0].y=-inf;
    for(int i=1; i<=n; i++)
    {
        a[i].x=m+1-a[i].x;
        if(a[i].y==a[i-1].y)ret--;
    }
    sort(a+1,a+n+1);
    solve();
    printf("%I64d\n",ret);
    return 0;
}
