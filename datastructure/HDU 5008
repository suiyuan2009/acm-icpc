/*
题意：给出一个串，每次询问去重后第k小的子串是谁

后缀数组
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef __int64 ll;
const int N = 100005;

char str[N];
int n;
ll s[N];

int wa[N], wb[N], wv[N], wss[N], sa[N];
int cmp(int *r, int a, int b, int l)
{
    return r[a] == r[b] && r[a + l] == r[b + l];
}
void da(char *r, int *sa, int n, int m)
{
    int i, j, p, *x = wa, *y = wb, *t;
    for(i = 0; i < m; i++) wss[i] = 0;
    for(i = 0; i < n; i++) wss[x[i] = r[i]]++;
    for(i = 0; i < m; i++) wss[i] += wss[i - 1];
    for(i = n - 1; i >= 0; i--) sa[--wss[x[i]]] = i;
    for(j = 1, p = 1; p < n; j *= 2, m = p)
    {
        for(p = 0, i = n - j; i < n; i++) y[p++] = i;
        for(i = 0; i < n; i++) if(sa[i] >= j) y[p++] = sa[i] - j;
        for(i = 0; i < n; i++) wv[i] = x[y[i]];
        for(i = 0; i < m; i++) wss[i] = 0;
        for(i = 0; i < n; i++) wss[wv[i]]++;
        for(i = 1; i < m; i++) wss[i] += wss[i - 1];
        for(i = n - 1; i >= 0; i--) sa[--wss[wv[i]]] = y[i];
        for(t = x, x = y, y = t, p = 1, x[sa[0]] = 0, i = 1; i < n; i++)
            x[sa[i]] = cmp(y, sa[i - 1], sa[i], j) ? p - 1 : p++;
    }
}
int *rank = wa, *height = wb;
void calheight(char *r, int *sa, int n)
{
    int i, j, k = 0;
    for(i = 1; i <= n; i++) rank[sa[i]] = i;
    for(i = 0; i < n; height[rank[i++]] = k)
        for(k ? k-- : 0, j = sa[rank[i] - 1]; r[i + k] == r[j + k]; k++);
}

struct RMQ
{
    int dp[N][20];
    void init(int *s)
    {
        for(int i=1; i<=n; i++) dp[i][0]=s[i];
        for(int j=1; (1<<j)<=n; j++)
            for(int i=1; i+(1<<j)-1<=n; i++)
                dp[i][j]=min(dp[i][j-1],dp[i+(1<<(j-1))][j-1]);
    }
    int query(int L,int R)
    {
        int k=0;
        while((1<<(k+1))<=R-L+1) k++;
        return min(dp[L][k],dp[R-(1<<k)+1][k]);
    }
} rmq1,rmq2;

void init()
{
    n = strlen(str);
    str[n]=0;
    da(str, sa, n + 1, 150);
    calheight(str, sa, n);
    rmq1.init(sa),rmq2.init(height);
    for(int i=1; i<=n; i++)
        s[i]=s[i-1]+n-height[i]-sa[i];
}

int bs(ll k)
{
    int l=1,r=n,ans=1;
    while(l<=r)
    {
        int m=(l+r)>>1;
        if(k<=s[m])
        {
            ans=m;
            r=m-1;
        }
        else l=m+1;
    }
    return ans;
}
void pd(int&ansl,int&ansr,int pos,int len)
{
    ansl=ansr=pos;
    if(pos+1<=n&&height[pos+1]>=len)
    {
        int l=pos+1,r=n,ans=l;
        while(l<=r)
        {
            int m=(l+r)>>1;
            if(rmq2.query(pos+1,m)>=len)
            {
                ans=m;
                l=m+1;
            }
            else r=m-1;
        }
        ansr=ans;
    }
    if(pos>1&&height[pos]>=len)
    {
        int l=2,r=pos,ans=pos;
        while(l<=r)
        {
            int m=(l+r)>>1;
            if(rmq2.query(m,pos)>=len)
            {
                ans=m;
                r=m-1;
            }
            else l=m+1;
        }
        ansl=ans-1;
    }
}

int main()
{
    //freopen("in.cpp","r",stdin);
    while(~scanf("%s", str))
    {
        init();
        //for(int i=1;i<=n;i++)printf("%d: %d %d\n",i,sa[i],height[i]);
        int m;
        ll l=0,r=0;
        scanf("%d",&m);
        while(m--)
        {
            ll v;
            scanf("%I64d",&v);
            ll k=(v^l^r)+1;
            //printf("** %I64d\n",k);
            //k=v;
            if(k>s[n])l=r=0;
            else
            {
                int pos=bs(k);
                k-=s[pos-1];
                int len=height[pos]+(int)k;
                int x,y;
                pd(x,y,pos,len);
                int tt=rmq1.query(x,y);
                l=tt+1,r=tt+len;
            }
            printf("%I64d %I64d\n",l,r);
        }
    }
    return 0;
}
