/*
具体算法思想见《运用伸展树解决数列维护问题》By Crash
*/
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
using namespace std;
const int MAXN=100000+10;
const int inf=~0U>>2;

struct node
{
    node *ch[2], *p;
    int size, add, val, Min, rev;
    node ()
    {
        size=0;
        val=inf;
    }
    bool d()
    {
        return this==p->ch[1];
    }
    void setc(node *c, int d)
    {
        ch[d]=c;
        c->p=this;
    }
    void markAdd(int _add)
    {
        add+=_add, val+=_add, Min+=_add;
    }
    void markRev()
    {
        rev^=1;
        swap(ch[0], ch[1]);
    }
    void update()
    {
        size=ch[0]->size+ch[1]->size+1;
        Min=min(val, min(ch[0]->Min, ch[1]->Min));
    }
}*null, *root;
node mem[MAXN*2], *stk[MAXN*2];
int A[MAXN], N, M, top;

inline void pushdown(node *t)
{
    if (t==null) return;
    if (t->add)
    {
        if (t->ch[0]!=null) t->ch[0]->markAdd(t->add);
        if (t->ch[1]!=null) t->ch[1]->markAdd(t->add);
    }
    if (t->rev)
    {
        if (t->ch[0]!=null) t->ch[0]->markRev();
        if (t->ch[1]!=null) t->ch[1]->markRev();
    }
    t->add=t->rev=0;
}

inline node *new_node(int v)
{
    node *ret=stk[--top];
    ret->val=v;
    ret->size=1;
    ret->Min=v;
    ret->add=0;
    ret->ch[0]=ret->ch[1]=ret->p=null;
    return ret;
}

inline void recycle(node *x)
{
    stk[top++]=x;
}

inline node* rot(node *t)
{
    node *p=t->p;
    pushdown(p);
    pushdown(t);
    int d=t->d();
    p->p->setc(t, p->d());
    p->setc(t->ch[!d], d);
    t->setc(p, !d);
    p->update();
    if (p==root) root=t;
    return t;
}

inline void splay(node *t, node *f)
{
    for (pushdown(t); t->p!=f;)
    {
        if (t->p->p==f) rot(t);
        else t->d()==t->p->d() ? (rot(t->p), rot(t)) : (rot(t), rot(t));
    }
    t->update();
}

inline node *select(int k)
{
    for (node *t=root;;)
    {
        pushdown(t);
        int c=t->ch[0]->size;
        if (k==c) return t;
        if (k>c) k-=c+1, t=t->ch[1];
        else t=t->ch[0];
    }
    return null;
}

inline node *get_seq(int l, int r)
{
    node *L=select(l);
    splay(L, null);
    node *R=select(r);
    splay(R, root);
    return root->ch[1]->ch[0];
}

node *build_tree(int *l, int *r)
{
    if (l>=r) return null;
    if (l+1==r) return new_node(*l);
    int *m=l+(r-l)/2;
    node *t=new_node(*m);
    t->setc(build_tree(l, m), 0);
    t->setc(build_tree(m+1, r), 1);
    t->update();
    return t;
}

void init()
{
    for (int i=0; i<2*MAXN; i++) stk[i]=mem+i;
    top=MAXN*2;
    null=new_node(inf);
    null->size=0;
    null->Min=inf;
    null->ch[0]=null->ch[1]=null->p=null;
    A[0]=A[N+1]=inf;
    root=build_tree(A, A+N+2);
}

void ADD()
{
    int x, y, D;
    scanf("%d%d%d", &x, &y, &D);
    node *t=get_seq(x-1, y+1);
    t->markAdd(D);
    splay(t, null);
}

void REVERSE()
{
    int x, y;
    scanf("%d%d", &x, &y);
    node *t=get_seq(x-1, y+1);
    t->markRev();
    splay(t, null);
}

void REVOLVE()
{
    int x, y, T;
    scanf("%d%d%d", &x, &y, &T);
    int n=y-x+1;
    T%=n;
    if (T==0) return;
    node *t=get_seq(x-1, x+n-T);
    t->p->setc(null, 0);
    splay(root->ch[1], null);
    get_seq(x+T-1, x+T);
    root->ch[1]->setc(t, 0);
    splay(t, null);
}

void INSERT()
{
    int x, P;
    scanf("%d%d", &x, &P);
    A[0]=P;
    node *t=build_tree(A, A+1);
    get_seq(x, x+1);
    root->ch[1]->setc(t, 0);
    splay(t, null);
}

void DELETE()
{
    int x;
    scanf("%d", &x);
    node *t=get_seq(x-1, x+1);
    t->p->setc(null, 0);
    splay(root->ch[1], null);
    recycle(t);
}

void MIN()
{
    int x, y;
    scanf("%d%d", &x, &y);
    node *t=get_seq(x-1, y+1);
    printf("%d\n", t->Min);
}

int main()
{
    scanf("%d", &N);
    for (int i=1; i<=N; i++) scanf("%d", A+i);
    init();
    scanf("%d", &M);
    while (M--)
    {
        char CMD[20];
        scanf("%s", CMD);
        if (CMD[0]=='A') ADD();
        else if (CMD[0]=='I') INSERT();
        else if (CMD[0]=='D') DELETE();
        else if (CMD[0]=='M') MIN();
        else if (CMD[3]=='E') REVERSE();
        else if (CMD[3]=='O') REVOLVE();
    }
    return 0;
}
