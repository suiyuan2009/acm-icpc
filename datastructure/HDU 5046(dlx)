/*
最小支配集
*/
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <math.h>
#include <stdlib.h>
#include <time.h>
using namespace std;
const int maxn=65;
const int maxm=maxn*maxn;
const int INF=0x3fffffff;
typedef long long ll;

struct DLX{
    const static int maxn=311110;
#define FF(i,A,s) for(int i = A[s];i != s;i = A[i])
    int L[maxn],R[maxn],U[maxn],D[maxn];
    int size,col[maxn],row[maxn],s[maxn],H[maxn];
    bool vis[700];
    int ans[maxn],cnt;
    void init(int m){
        for(int i=0;i<=m;i++){
            L[i]=i-1;R[i]=i+1;U[i]=D[i]=i;s[i]=0;
        }
        memset(H,-1,sizeof(H));
        L[0]=m;R[m]=0;size=m+1;
    }
    void link(int r,int c){
        U[size]=c;D[size]=D[c];U[D[c]]=size;D[c]=size;
        if(H[r]<0)H[r]=L[size]=R[size]=size;
        else {
            L[size]=H[r];R[size]=R[H[r]];
            L[R[H[r]]]=size;R[H[r]]=size;
        }
        s[c]++;col[size]=c;row[size]=r;size++;
    }
    void del(int c){//精确覆盖
        L[R[c]]=L[c];R[L[c]]=R[c];  
        FF(i,D,c)FF(j,R,i)U[D[j]]=U[j],D[U[j]]=D[j],--s[col[j]];  
    }  
    void add(int c){  //精确覆盖
        R[L[c]]=L[R[c]]=c;  
        FF(i,U,c)FF(j,L,i)++s[col[U[D[j]]=D[U[j]]=j]];  
    }  
    bool dfs(int k){//精确覆盖
        if(!R[0]){  
            cnt=k;return 1;  
        }  
        int c=R[0];FF(i,R,0)if(s[c]>s[i])c=i;  
        del(c);  
        FF(i,D,c){  
            FF(j,R,i)del(col[j]);  
            ans[k]=row[i];if(dfs(k+1))return true;  
            FF(j,L,i)add(col[j]);  
        }  
        add(c);  
        return 0;
    }  
    void remove(int c){//重复覆盖
        FF(i,D,c)L[R[i]]=L[i],R[L[i]]=R[i];
    }
    void resume(int c){//重复覆盖
        FF(i,U,c)L[R[i]]=R[L[i]]=i;
    }
    int A(){//估价函数
        int res=0;
        memset(vis,0,sizeof(vis));
        FF(i,R,0)if(!vis[i]){
            res++;vis[i]=1;
            FF(j,D,i)FF(k,R,j)vis[col[k]]=1;
        }
        return res;
    }
    void dfs(int now,int &lim){//重复覆盖  
        if(R[0]==0)cnt=now,lim=min(lim,now);
        else if(now+A()<lim){  
            int temp=INF,c;  
            FF(i,R,0)if(temp>=s[i])temp=s[i],c=i;  
            FF(i,D,c){  
                ans[now]=i;
                remove(i);FF(j,R,i)remove(j);  
                dfs(now+1,lim);  
                FF(j,L,i)resume(j);resume(i);  
            }  
        }
    }
}dlx;

struct Point{
    int x,y;
}p[maxn];
ll dis(Point a,Point b){
    return (ll)abs(a.x-b.x)+(ll)abs(a.y-b.y);
}

vector<ll>vis;

int main()
{
    //freopen("ACM/in.in","r",stdin);
    //freopen("out.txt","w",stdout);
    int T,ncase=0;
    int n;
    int K;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%d",&n,&K);
        for(int i = 0;i < n;i++)scanf("%d%d",&p[i].x,&p[i].y);
        vis.clear();
        for(int i=0;i<n;i++)
            for(int j=i;j<n;j++)
                vis.push_back(dis(p[i],p[j]));
        sort(vis.begin(),vis.end());
        vis.erase(unique(vis.begin(),vis.end()),vis.end());
        int l = 0, r =vis.size()-1;
        ll ret=vis[r];
        while(l<=r)
        {
            int mid = (l+r)>>1;
            dlx.init(n);
            for(int i = 0;i < n;i++)
                for(int j = 0;j < n;j++)
                    if(dis(p[i],p[j])<=vis[mid])
                        dlx.link(i+1,j+1);
            int ans=INF;
            dlx.dfs(0,ans); 
            if(ans<=K){
                r = mid-1;
                ret=vis[mid];
            }
            else l = mid+1;
        }
        printf("Case #%d: %lld\n",++ncase,ret);
    }
    return 0;
}
