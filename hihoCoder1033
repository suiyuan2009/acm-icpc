/*
题意：定义一个数的交错和是它十进制各个位一加一减的结果，问l到r区间里有多少交错和是k的数

记f[i][j][k][r]，数位dp，第一维表示十进制第几位，第二维表示当前交错和，第三维表示第一个不是0的位离当前位的距离，第四维表示是否紧贴上界
*/
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
using namespace std;
typedef long long ll;
const int maxn = 20;
const int maxm = 205;
const int inf = 0x3fffffff;
const int mod = 1000000007;

ll f[maxn][maxm][maxn][2][2];
bool g[maxn][maxm][maxn][2];
ll A[maxn];

ll n;
int a[maxn], m;
int k;

void init()
{
    A[0] = 1;
    for (int i = 1; i < maxn; i++)
        A[i] = A[i - 1] * 10 % mod;
    m = 0;
    memset(g, 0, sizeof(g));
    memset(f, 0, sizeof(f));
    if (n == 0)a[++m] = 0;
    else
    {
        while (n)
        {
            a[++m] = n % 10;
            n /= 10;
        }
    }
}

void pd(ll &ret, ll val)
{
    val = (val % mod + mod) % mod;
    ret += val;
    if (ret >= mod)ret -= mod;
}

void dfs(int x, int y, int z, int w)
{
    if (g[x][y][z][w])return;
    if (x == 0)
    {
        g[x][y][z][w] = 1;
        if (y == k + 100)f[x][y][z][w][0] = 1;
        else f[x][y][z][w][0] = 0;
        f[x][y][z][w][1] = 0;
        return;
    }
    ll ret0 = 0, ret1 = 0;
    int lim = a[x];
    if (w)lim = 9;
    for (int i = 0; i <= lim; i++)
    {
        int sign = 0;
        if (z == 0)
        {
            if (i == 0)sign = 0;
            else sign = 1;
        }
        else
        {
            if (z & 1)sign = -1;
            else sign = 1;
        }
        int tmp = y + sign * i;
        int tmp2 = z + abs(sign);
        int tmp3 = (w || i < lim);
        dfs(x - 1, tmp, tmp2, tmp3);
        pd(ret0, f[x - 1][tmp][tmp2][tmp3][0]);
        pd(ret1, f[x - 1][tmp][tmp2][tmp3][1] + f[x - 1][tmp][tmp2][tmp3][0]* i % mod * A[x - 1] % mod);
    }
    g[x][y][z][w] = 1;
    f[x][y][z][w][0] = ret0;
    f[x][y][z][w][1] = ret1;
}

int main()
{
    //freopen("in.cpp", "r", stdin);
    //freopen("out.cpp", "w", stdout);
    ll l, r;
    scanf("%lld%lld%d", &l, &r, &k);
    ll ret = 0;
    n = r;
    init();
    dfs(m, 100, 0, 0);
    ret = f[m][100][0][0][1];

    //printf("$$ %lld %lld\n", f[1][1][1][0][0], f[1][1][1][0][1]);
    //printf("** %lld\n", ret);

    if (l == 0)l = 1;
    n = l - 1;
    init();
    dfs(m, 100, 0, 0);
    pd(ret, -f[m][100][0][0][1]);
    printf("%lld\n", ret);
    return 0;
}
