/*
ac自动机+dp
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=105;
const int maxm=205;
const int mod=1000000007;

int f[maxn][maxn][maxm][4];
int n,m;

int next[420][2],fail[420],end[420];
int root,L;

int change(char ch)
{
    if(ch=='D')return 1;
    return 0;
}
int newnode()
{
    for(int i=0; i<2; i++)
        next[L][i]=-1;
    end[L++]=0;
    return L-1;
}
void init()
{
    L=0;
    root=newnode();
}
void insert(char s[],int id)
{
    int len=strlen(s);
    int now=root;
    for(int i=0; i<len; i++)
    {
        if(next[now][change(s[i])]==-1)
            next[now][change(s[i])]=newnode();
        now=next[now][change(s[i])];
    }
    end[now]|=(1<<id);
}
void build()
{
    queue<int>Q;
    fail[root]=root;
    for(int i=0; i<2; i++)
    {
        if(next[root][i]==-1)
            next[root][i]=root;
        else
        {
            fail[next[root][i]]=root;
            Q.push(next[root][i]);
        }
    }
    while(!Q.empty())
    {
        int now=Q.front();
        Q.pop();
        end[now]|=end[fail[now]];
        for(int i=0; i<2; i++)
        {
            if(next[now][i]==-1)
                next[now][i]=next[fail[now]][i];
            else
            {
                fail[next[now][i]]=next[fail[now]][i];
                Q.push(next[now][i]);
            }
        }
    }
}

void pd(int &ret,int val)
{
    ret+=val;
    if(ret>=mod)ret-=mod;
}
int solve()
{
    memset(f,0,sizeof(f));
    f[0][0][0][0]=1;
    for(int x=0; x<=n; x++)
        for(int y=0; y<=m; y++)
            for(int i=0; i<L; i++)
                for(int j=0; j<4; j++)
                {
                    if(f[x][y][i][j]==0)continue;
                    if(x<n)
                    {
                        int nxt=next[i][0];
                        pd(f[x+1][y][nxt][j|end[nxt]],f[x][y][i][j]);
                    }
                    if(y<m)
                    {
                        int nxt=next[i][1];
                        pd(f[x][y+1][nxt][j|end[nxt]],f[x][y][i][j]);
                    }
                }
    int ret=0;
    for(int i=0; i<L; i++)
        pd(ret,f[n][m][i][3]);
    return ret;
}

char str[maxm];
int main()
{
    //freopen("in.cpp","r",stdin);
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%d",&n,&m);
        init();
        for(int i=0; i<2; i++)
        {
            scanf("%s",str);
            insert(str,i);
        }
        build();
        printf("%d\n",solve());
    }
    return 0;
}
