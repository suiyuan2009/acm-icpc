/*
题意：最多交换两个字符，求最长的回文子串长度

hash，分情况讨论
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn=200005;
const int base=257;

char str[maxn];
ll hl[maxn],hr[maxn],L[maxn],R[maxn],p[maxn];
int u[maxn],n;

void manacher(const char *s, int u[], int n)
{
    for (int i = 0; i < 2 * n; ++ i) u[i] = 0;
    for (int i = 0, j = 0, k; i < 2 * n; i += k, j = max(j - k, 0))
    {
        while (i >= j && i + j + 1 < 2 * n && s[(i - j) >> 1] == s[(i + j + 1) >> 1]) ++ j;
        u[i] = j;
        for (k = 1; i >= k && u[i] >= k && u[i - k] != u[i] - k; ++ k)
        {
            u[i + k] = min(u[i - k], u[i] - k);
        }
    }
}

inline int bit(char ch)
{
    if(ch>='a'&&ch<='z')return ch-'a';
    return ch-'A'+26;
}

void init_1()
{
    p[0]=1;
    for(int i=1; i<maxn; i++)p[i]=p[i-1]*base;
}

void init_2()
{
    n=strlen(str+1);
    L[0]=hr[n+1]=hl[0]=R[n+1]=0;
    for(int i=n; i>=1; i--)
    {
        R[i]=R[i+1]*base+bit(str[i])+1;
        hr[i]=hr[i+1]|(1LL<<bit(str[i]));
    }
    for(int i=1; i<=n; i++)
    {
        L[i]=L[i-1]*base+bit(str[i])+1;
        hl[i]=hl[i-1]|(1LL<<bit(str[i]));
    }
    manacher(str+1,u,n);
}

int pd(int s,int e)
{
    if(s<1||e>n)return -1;
    int l=1,r=min(s,n+1-e),ret=0;
    while(l<=r)
    {
        int m=(l+r)>>1;
        ll tt1=L[s]-L[s-m]*p[m];
        ll tt2=R[e]-R[e+m]*p[m];
        if(tt1==tt2)
        {
            ret=m;
            l=m+1;
        }
        else r=m-1;
    }
    return ret;
}

bool test(int x,int y,int z,int w)
{
    if(str[x]==str[y]&&str[z]==str[w])return 1;
    if(str[x]==str[z]&&str[y]==str[w])return 1;
    return 0;
}

int pd2(int s,int e)
{
    if(s<1||e>n)return -1;
    int ret=-1,l,r,ans;
    l=1,r=s-1,ans=-1;
    while(l<=r)
    {
        int m=(l+r)>>1;
        if((hl[m]&(1LL<<bit(str[s])))||(hl[m]&(1LL<<bit(str[e]))))
        {
            ans=m;
            r=m-1;
        }
        else l=m+1;
    }
    if(ans!=-1)ret=s-ans;
    l=e+1,r=n,ans=-1;
    while(l<=r)
    {
        int m=(l+r)>>1;
        if((hr[m]&(1LL<<bit(str[s])))||(hr[m]&(1LL<<bit(str[e]))))
        {
            ans=m;
            l=m+1;
        }
        else r=m-1;
    }
    if(ans!=-1)ret=max(ret,ans-e);
    return ret;
}

int main()
{
   // freopen("in.in","r",stdin);
   // freopen("out.out","w",stdout);
    int ncase=0;
    init_1();
    while(~scanf("%s",str+1))
    {
        init_2();
        int ret=1;
        for(int i=1; i<=n; i++)
        {
            int len1=u[i*2-2]/2+1,len2=pd(i-len1-1,i+len1+1);
            //int len3=pd(i-len1-1-len2,i+len1+1+len2);
            //  printf("**%d: %d %d %d\n",i,len1,len2,len3);
            ret=max(ret,len1+len1-1);
            if(i-len1>=1&&i+len1<=n&&(str[i]==str[i-len1]||str[i]==str[i+len1]))
            {
                ret=max(ret,len1+len1-1+2+(len2+len2<0?0:len2+len2));
                //printf("** %d %d %d %d\n",i,len1,n,i-len1);
            }
            // printf("** %d\n",ret);
            //printf("**%d:%d %d %d\n",i,len1,len2,len3);
            if(len2!=-1)
            {
                int y=i-len1,z=i+len1,x=i-len1-1-len2,w=i+len1+1+len2;
                if(x<y&&y<z&&z<w&&x>=1&&w<=n&&test(x,y,z,w))
                {

                    int len3=pd(i-len1-1-len2-1,i+len1+1+len2+1);
                    //     if(i==4)printf("%d %d %d %d\n",len1,len2,len3,i);
                    ret=max(ret,len1+len1-1+2+len2+len2+2+(len3+len3<0?0:len3+len3));
                }
            }
            int lim=pd2(i-len1,i+len1);
            //printf("**%d:%d %d %d %d\n",i,len1,len2,lim,ret);
            if(lim!=-1)
            {
                len2=min(len2,lim-1);
                ret=max(ret,len1+len1-1+2+(len2+len2<0?0:len2+len2));
            }
        }
        // printf("***%d\n",ret);
        for(int i=1; i<n; i++)
        {
            int len1=u[i*2-1]/2,len2=pd(i-len1-1,i+1+len1+1);
            //   int len3=pd(i-len1-1-len2-1,i+1+len1+1+len2+1);
            ret=max(ret,len1+len1);
            // printf("** %d: %d %d %d\n",i,len1,len2,len3);
            if(len2!=-1)
            {
                int y=i-len1,z=i+1+len1,x=i-len1-1-len2,w=i+1+len1+1+len2;
                if(x<y&&y<z&&z<w&&x>=1&&w<=n&&test(x,y,z,w))
                {
                    //  if(i==2)printf("**\n");
                    int len3=pd(i-len1-1-len2-1,i+1+len1+1+len2+1);
                    ret=max(ret,len1+len1+2+len2+len2+2+(len3+len3<0?0:len3+len3));
                }
            }
            // printf("** %d: %d %d %d\n",i,len1,len2,ret);
            int lim=pd2(i-len1,i+1+len1);
            // printf("** %d: %d %d %d %d\n",i,len1,len2,lim,ret);
            if(lim!=-1)
            {
                len2=min(len2,lim-1);
                ret=max(ret,len1+len1+2+(len2+len2<0?0:len2+len2));
            }
        }
        printf("Case %d: %d\n",++ncase,ret);
    }
    return 0;
}
