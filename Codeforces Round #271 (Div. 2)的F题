/*
题意：多次询问[l,r]中有多少数能整除区间中所有的数
比赛中没有想的更深，先预处理出每个数能整除的最左和最右，问题就是统计询问区间中有多少数能覆盖这个区间，
按l排序，线段树中每个点记录有多少点[i,r[i]]覆盖它

其实只有区间中的最小值有可能整除所有数
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
using namespace std;
typedef long long ll;
const int maxn=100005;
const int mod=1000000007;

int n,m,a[maxn],lim[maxn],L[maxn],R[maxn];
int gcd(int x,int y){
    return y==0?x:gcd(y,x%y);
}
struct RMQ{
    int f[maxn][20];
    void init(int*a,int n){
    //  for(int i=1;i<=n;i++)printf("%d ",a[i]);
      //  printf("\n");
       for(int i=1; i<=n; i++) f[i][0]=a[i];
    for(int j=1; (1<<j)<=n; j++)
        for(int i=1;i+(1<<j)-1<=n;i++)
            f[i][j]=gcd(f[i][j-1],f[i+(1<<(j-1))][j-1]);
    }
    int query(int l,int r){
        int len=r-l+1;
        return gcd(f[l][lim[len]],f[r-(1<<lim[len])+1][lim[len]]);
    }
}rmq;

struct P{
    int l,r,id;
    P(){}
    P(int l,int r,int id):l(l),r(r),id(id){}
    bool operator<(const P&a)const{
        return l<a.l;
    }
}p[maxn];
struct Q{
    int r,id;
    Q(){}
    Q(int r,int id):r(r),id(id){}
};
vector<Q>q[maxn];
int ql[maxn];
struct ST{
    int l,r,val;
}st[maxn*4];
void build(int id,int l,int r){
    st[id].l=l,st[id].r=r,st[id].val=0;
    if(l==r)return;
    int m=(l+r)>>1;
    build(id<<1,l,m),build(id<<1|1,m+1,r);
}
void upd(int id,int l,int r,int val){
    if(st[id].l==l&&st[id].r==r){
        st[id].val+=val;
        return;
    }
    int m=(st[id].l+st[id].r)>>1;
    if(r<=m)upd(id<<1,l,r,val);
    else if(l>m)upd(id<<1|1,l,r,val);
    else upd(id<<1,l,m,val),upd(id<<1|1,m+1,r,val);
}
int query(int id,int pos){
    if(st[id].l==st[id].r)return st[id].val;
    int m=(st[id].l+st[id].r)>>1;
    if(pos<=m)return query(id<<1,pos)+st[id].val;
    return query(id<<1|1,pos)+st[id].val;
}

void init(){
    for(int i=1;i<maxn;i++){
        for(int j=0;j<20;j++){
            if((1<<j)+(1<<j)>=i){
                lim[i]=j;
                break;
            }
        }
    }
    scanf("%d",&n);
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    scanf("%d",&m);
    for(int i=1;i<=m;i++){
        int l,r;
        scanf("%d%d",&l,&r);
        ql[i]=r-l+1;
        q[l].push_back(Q(r,i));
    }
    rmq.init(a,n);
  //  printf("*&&* %d\n",rmq.query(1,3));
    for(int i=1;i<=n;i++){
        int l=i,r=n,ret=i;
        while(l<=r){
            int m=(l+r)>>1;
            if(rmq.query(i,m)==a[i]){
                ret=m;
                l=m+1;
            }else r=m-1;
        }
        R[i]=ret;
        l=1,r=i,ret=i;
        while(l<=r){
            int m=(l+r)>>1;
            if(rmq.query(m,i)==a[i]){
                ret=m;
                r=m-1;
            }else l=m+1;
        }
        L[i]=ret;
    }
    for(int i=1;i<=n;i++)p[i]=P(L[i],R[i],i);
    sort(p+1,p+n+1);
    build(1,1,n);
}

int ans[maxn];
int main(){
    //freopen("ACM/in.in","r",stdin);
    init();
    // for(int i=1;i<=n;i++)
     //      printf("%d: %d %d\n",i,L[i],R[i]);
    int rr=0;
    for(int i=1;i<=n;i++){
        while(rr+1<=n&&p[rr+1].l<=i){
            rr++;
            //if(p[rr].id==5)printf("** %d\n",i);

            //  printf("** %d %d\n",p[r].id,p[r].r);
            upd(1,p[rr].id,p[rr].r,1);
        }
        for(int j=0;j<q[i].size();j++){
            int id=q[i][j].id,r=q[i][j].r;
            ans[id]+=query(1,r);
        }
        upd(1,i,R[i],-1);
    }
    for(int i=1;i<=m;i++)printf("%d\n",ql[i]-ans[i]);
    return 0;
}
