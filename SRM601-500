/*
It's winter time! Time for snowmen to play some games.
Two snowmen are playing a game. In this game, the first snowman must choose a subset of the set {1, 2, ..., N}, and the second one must choose a subset of the set {1, 2, ..., M}. The following two conditions must be fulfilled:
The two sets have an empty intersection.
The XOR of all elements in the first set is less than the XOR of all elements in the second set.
You are given two ints N and M. Let X be the total number of different ways to choose the pair of sets. Return the value (X modulo 1,000,000,007).

枚举第r位Y是1，X是0，记f[i][j][1/0]为到第i个数，X和Y的异或和是j，Y的第r位是1的方案数
*/
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include <queue>
#include <map>
#include <stack>
#include <iostream>
using namespace std;
typedef long long ll;
const double eps = 1e-10;
const double PI = acos(-1);
const int maxn = 2005;
const int maxm= (1<<11);
const int inf = 0x3fffffff;
const int mod = 1000000007;

int f[maxn][maxm][2];

void add(int &ret,int val)
{
    ret+=val;
    if(ret>=mod)ret-=mod;
}

class WinterAndSnowmen
{
public:
    int getNumber(int N, int M)
    {
        int ret=0;
        int n=max(N,M);
        for(int i=0; i<12; i++)
        {
            memset(f,0,sizeof(f));
            f[0][0][0]=1;
            for(int j=0; j<n; j++)
                for(int k=0; k<maxm; k++)
                    for(int r=0; r<2; r++)
                    {
                        add(f[j+1][k][r],f[j][k][r]);
                        if(j+1<=N)add(f[j+1][k^(j+1)][r],f[j][k][r]);
                        if(j+1<=M)
                        {
                            // if(i==1&&j==1&&k==0&&r==0)printf("&& %d %d %d\n",j+1,k|(j+1),r^((j+1)&(1<<i)));
                            add(f[j+1][k^(j+1)][r^(((j+1)&(1<<i))?1:0)],f[j][k][r]);
                        }
                    }
            // if(i==1)printf("** %d\n",f[2][2][1]);
            for(int j=0; j<maxm; j++)
                if((j>>i)==1)add(ret,f[n][j][1]);
        }
        return ret;
    }
};
