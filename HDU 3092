/*
题意：把n分解成一些数，最小公倍数最大是多少
f[i][j]代表到第i个素数，且和是j时的最大值，
枚举每个素数有多少个。
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-7
typedef long long ll;
typedef long double ldb;
const int inf=0x3f3f3f3f;
const int maxn=3005;
const int mod=1000000007;

bool notp[maxn];
int p[maxn],cp;
int n,m;
double f[maxn];
int g[maxn];

void init_1()
{
    for(int i=2; i<maxn; i++)
        if(!notp[i])
        {
            p[cp++]=i;
            for(int j=i+i; j<maxn; j+=i)
                notp[j]=1;
        }
}

void init_2()
{
    for(int i=0; i<maxn; i++)
    {
        f[i]=0;
        g[i]=1;
    }
}


int main()
{
    init_1();
    //freopen("in.cpp","r",stdin);
    while(~scanf("%d%d",&n,&m))
    {
        init_2();
        for(int i=0; i<cp; i++)
        {
            double tt=log(p[i]);
            for(int j=n; j>=p[i]; j--)
            {
                double cnt=0;
                for(int k=p[i]; k<=j; k*=p[i])
                {
                    cnt+=tt;
                    if(f[j]<f[j-k]+cnt)
                    {
                        f[j]=f[j-k]+cnt;
                        g[j]=(g[j-k]*k)%m;
                    }
                }
            }
        }
        printf("%d\n",g[n]%m);
    }
    return 0;
}
