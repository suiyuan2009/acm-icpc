#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<cmath>
using namespace std;
typedef long long ll;
const int maxn = 1005;
const int mod = 1000000007;

int sg[maxn][4];
vector<int>vis;
void dfs(int x,int y){
    if(sg[x][y]!=-1)return;
    if(x==1){
        if(y==1||y==3){
            sg[x][y]=-2;
            return;
        }
        if(y==0){
            sg[x][y]=1;
            return;
        }
        sg[x][y]=0;return;
    }
    if(x==2){
        if(y==1){
            sg[x][y]=1;
            return;
        }
        if(y==2||y==0){
            sg[x][y]=0;
            return;
        }
        sg[x][y]=-2;return;
    }
    if(x==3&&y==3){
        sg[x][y]=0;
        return;
    }
    if(y==0){
        for(int i=1;i<=x;i++){
            if(i==1||i==x)dfs(1,2),dfs(x,1);
            else dfs(i,1),dfs(x-i+1,1);
        }
        vis.clear();
        for(int i=1;i<=x;i++){
            if(i==1||i==x)vis.push_back(sg[1][2]^sg[x][1]);
            else vis.push_back(sg[i][1]^sg[x-i+1][1]);
        }
    }else if(y==1){
        for(int i=2;i<=x;i++){
            if(i==2)dfs(i,2),dfs(x-i+1,1);
            else if(i==x)dfs(i,2),dfs(i,3),dfs(x-i+1,2);
            else dfs(i,2),dfs(i,3),dfs(x-i+1,1);
        }
        vis.clear();
        for(int i=2;i<=x;i++){
            if(i==2)vis.push_back(sg[i][2]^sg[x-i+1][1]);
            else if(i==x)vis.push_back(sg[i][2]^sg[x-i+1][2]),vis.push_back(sg[i][3]^sg[x-i+1][2]);
            else vis.push_back(sg[i][2]^sg[x-i+1][1]),vis.push_back(sg[i][3]^sg[x-i+1][1]);
        }
    }else if(y==2){
        for(int i=2;i<x;i++){
            if(i==2||i==x-1)dfs(i,2),dfs(x-i+1,2);
            else dfs(i,2),dfs(x-i+1,2),dfs(i,3),dfs(x-i+1,3);
        }
        vis.clear();
        for(int i=2;i<x;i++){
            if(i==2||i==x-1)vis.push_back(sg[i][2]^sg[x-i+1][2]);
            else vis.push_back(sg[i][2]^sg[x-i+1][2]),vis.push_back(sg[i][3]^sg[x-i+1][3]);
        }
    }else{
        for(int i=2;i<x;i++){
            if(i==2){
                dfs(i,2),dfs(x-i+1,3);
            }else if(i==x-1){
                dfs(i,3),dfs(x-i+1,2);
            }else{
                dfs(i,2),dfs(x-i+1,3);
                dfs(i,3),dfs(x-i+1,2);
            }
        }
        vis.clear();
        for(int i=2;i<x;i++){
            if(i==2){
                vis.push_back(sg[i][2]^sg[x-i+1][3]);
            }else if(i==x-1){
                vis.push_back(sg[i][3]^sg[x-i+1][2]);
            }else{
                vis.push_back(sg[i][3]^sg[x-i+1][2]);
                vis.push_back(sg[i][2]^sg[x-i+1][3]);
            }
        }
    }
    sort(vis.begin(),vis.end());
    vis.erase(unique(vis.begin(),vis.end()),vis.end());
    int ret=-1;
    for(int i=0;i<vis.size();i++)
        if(vis[i]!=i){
            ret=i;
            break;
        }
    if(ret==-1)ret=vis.size();
    sg[x][y]=ret;
}

class PathGame{
    public:
        string judge(vector <string> a){
            memset(sg,-1,sizeof(sg));
            for(int i=1;i<maxn;i++)
                for(int j=0;j<4;j++)
                    dfs(i,j);
            int ret=0;
            int n=a[0].size();
            for(int i=0;;){
                int pos=n-1;
                for(int j=i+1;j<n;j++)
                    if(a[0][j]=='#'||a[1][j]=='#'){
                        pos=j;
                        break;
                    }
                int l=0,r=0;
                if(a[0][i]=='#')l|=1;
                if(a[1][i]=='#')l|=2;
                if(a[0][pos]=='#')r|=1;
                if(a[1][pos]=='#')r|=2;
                if(l==r){
                    if(l)ret^=sg[pos-i+1][2];
                    else ret^=sg[pos-i+1][0];
                }else{
                    if(l&&r)ret^=sg[pos-i+1][3];
                    else ret^=sg[pos-i+1][1];
                }
                i=pos;
                if(i==n-1)break;
            }
            if(ret)return string("Snuke");
            return string("Sothe");
        }
};
