/*
题意：定义s[i]为{1,2,3,...i}这个集合的子集个数，如果gcd(s[i],s[j])对所有的1<=j<i都成立，
则称s[i]为素数，问是X的倍数且大于等于第K个素数的(s[n]/x)%m是多少。
定义f[1]=f[2]=1,f[i]=f[i-1]+f[i-2]，可以推出gcd(f[i],f[j])=f[gcd(i,j)]，且s[i]=f[i+2]，
并且a/x%m=a%(x*m)/x，当x*m%x==0。
所以求出第k个素数，然后暴力找就行


http://www.cppblog.com/purplest/archive/2013/07/24/202085.html
I. gcd(ab,c)=gcd(a,c) 当gcd(b,c)=1时。
证明：gcd(ab,c)=gcd(a,c)*gcd(b,c)=gcd(a,c)

II. gcd(a,b)=gcd(b, a%b)。
证明：假设a>=b，则a=nb+m。假设g|a，g|b，所以g|(nb+m)，所以g|m。因为a%b=(nb+m)%b=m，所以得证。

III. gcd(fib(i),fib(i+1))=1。
证明：因为fib(i+1)=fib(i)+fib(i-1)，
所以gcd(fib(i),fib(i+1))=gcd(fib(i),fib(i)+fib(i-1))=gcd(fib(i),(fib(i)+fib(i-1))%fib(i))=gcd(fib(i),gcd(fib-1))，
可以把euclid的过程给展开，得到：
fib(i+1)=1*fib(i)+fib(i-1)
fib(i)=1*fib(i-1)+fib(i-2)
fib(i-1)=1*fib(i-2)+fib(i-3)
......
fib(4)=1*fib(3)+fib(2)
fib(3)=2*fib(2)+0
最后一行写出来就是：
2 = 2*1+0
所以gcd(fib(i),fib(i+1))=fib(2)=1;
英文原文证明以及反证法参考：
Consecutive Fibonacci Numbers Relatively Prime
http://mathforum.org/library/drmath/view/52716.html 

IV. fib(u+v)=fib(u)fib(v-1)+fib(u+1)fib(v).
证明：利用反证法。
当u=1时：fib(1+v)=fib(1)fib(v-1)+fib(2)fib(v)=fib(v-1)+fib(v) 成立。
假设u=n时成立：fib(n+v)=fib(n)fib(v-1)+fib(n+1)fib(v) 成立。
u=n+1时：
fib(n+1+v)=fib(n+v)+fib(n+v-1)=fib(n)fib(v-1)+fib(n+1)fib(v) + fib(n-1)fib(v-1)+fib(n)fib(v)
=fib(v-1)(fib(n)+fib(n-1)) + fib(v)(fib(n-1)+fib(n)) = fib(n+1)fib(v-1)+fib(n+2)fib(v) = fib(n+1+v)
所以，由数学归纳法可以得证。
英文原文证明以及Binet Formula证明参考：
http://mathforum.org/library/drmath/view/51624.html 

V. fibonacci-gcd proof: gcd(fib(n),fib(m))=fib(gcd(n,m)).
证明：假设n<=m，则: gcd(fib(n),fib(m))=gcd(fib(n),fib(n+k))，由证明IV，可得：
gcd(fib(n),fib(n+k))=gcd(fib(n),fib(n)fib(k-1)+fib(n+1)fib(k))
=gcd(fib(n),(fib(n)fib(k-1)+fib(n+1)fib(k))%fbi(b))
=gcd(fib(n),fib(n+1)fib(k))，由证明III，gcd(fib(b),fib(n+1))=1，所以由证明I可得：
gcd(fib(n),fib(n+1)fib(k))=gcd(fib(n),fib(k))，所以可得：
gcd(fib(n),fib(m))=gcd(fib(n),fib(m%n))。由展开euclid算法可知，算法在gcd(fib(g),fib(0))时停止，而g=gcd(m,n)。
所以由euclid算法的定义可得gcd(fib(g),fib(0))=fib(g)。
所以得证gcd(fib(n),fib(m))=fib(gcd(n,m))
英文原文证明参考：
http://mathforum.org/library/drmath/view/61690.html

VI. (a/b)%c=(a%bc)/b 当 b|a。
证明：因为b|a，所以a=kb。
左边=(a/b)%c=(kb/b)%c=k%c。
右边=(kb%bc)/b=((k%c)b)/b=k%c。
所以得证。

VII. fibonacci的一个结论：

矩阵快速幂即可。

VIII. 又一个结论，因为x很小（x<=100），所以能在题目给定的时间内枚举到所需的S[n]。

*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
#include<sstream>
#include<deque>
using namespace std;
#define eps 1e-8
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=16000005;

bool notp[maxn];
int p[maxn],cp;
int x,K,m,mod;

void init()
{
    cp=2,p[1]=3,p[2]=4;
    for(int i=2; i<maxn; i++)
        if(!notp[i])
        {
            if(i>=5)p[++cp]=i;
            for(int j=i+i; j<maxn; j+=i)
                notp[j]=1;
        }
    //printf("** %d\n",cp);
}

struct Mat
{
    int n,m,a[2][2];
    Mat(int _n,int _m,bool flag)
    {
        n=_n,m=_m;
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
                a[i][j]=(i==j&&flag);
    }
    Mat operator*(const Mat &tt)const
    {
        Mat ret=Mat(n,tt.m,0);
        for(int i=0; i<n; i++)
            for(int j=0; j<tt.m; j++)
                for(int k=0; k<m; k++)
                {
                    ret.a[i][j]+=((ll)a[i][k]*tt.a[k][j])%mod;
                    ret.a[i][j]%=mod;
                }
        return ret;
    }
};

int get_S(int n)
{
    n-=2;
    Mat ret=Mat(2,1,0);
    ret.a[0][0]=ret.a[1][0]=1;
    Mat mul=Mat(2,2,0);
    mul.a[0][1]=mul.a[1][1]=mul.a[1][0]=1;
    Mat tt=Mat(2,2,1);
    while(n)
    {
        if(n&1)tt=mul*tt;
        mul=mul*mul;
        n>>=1;
    }
    ret=tt*ret;
    return ret.a[1][0];
}

int main()
{
    //freopen("in.cpp","r",stdin);
    init();
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%d%d",&K,&x,&m);
        int pos=p[K];
        while(1)
        {
            mod=x;
            int tt=get_S(pos);
            if(tt==0)
            {
                mod=x*m;
                int ret=get_S(pos)/x;
                printf("%d\n",ret);
                break;
            }
            pos++;
        }
    }
    return 0;
}
