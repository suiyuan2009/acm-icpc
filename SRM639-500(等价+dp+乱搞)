/*
题意：给出一个01矩阵，每次可以沿着行或者列折叠，问原矩阵中有多少子矩阵可以由折叠得到
赛中剩20m写，没写完，方法是对的，找出四个方向可以从哪些行哪些列折叠，要用到dp，然后统计可行的子矩阵个数。
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<cmath>
#include<map>
#include<stack>
#include<bitset>
using namespace std;
typedef long long ll;
const int maxn = 255;

int a[maxn][maxn], n, m;
int change(char ch) {
    if(ch >= '0' && ch <= '9')return ch - '0';
    if(ch >= 'a' && ch <= 'z')return ch - 'a' + 10;
    if(ch >= 'A' && ch <= 'Z')return ch - 'A' + 36;
    if(ch == '#')return 62;
    return 63;
}
int b[4][maxn];
int c[2][maxn];
void init() {
    for(int i = 0; i < m; i++) {
        c[0][i] = 0;
        for(int j = 1; i - j >= 0 && i + j - 1 < m; j++) {
            bool sign = 0;
            for(int k = 0; k < n; k++)
                if(a[k][i - j] != a[k][i + j - 1])sign = 1;
            if(sign)break;
            c[0][i] = j;
        }
    }
    for(int i = 0; i < n; i++) {
        c[1][i] = 0;
        for(int j = 1; i - j >= 0 && i + j - 1 < n; j++) {
            bool sign = 0;
            for(int k = 0; k < m; k++)
                if(a[i - j][k] != a[i + j - 1][k])sign = 1;
            if(sign)break;
            c[1][i] = j;
        }
    }
    b[0][0] = 1;
    for(int i = 1; i < m; i++)
        for(int j = 0; j < i; j++)
            if(c[0][i] >= i - j && i + i - j - 1 < m && b[0][j])b[0][i] = 1;
    for(int i = 1; i < m; i++)
        b[0][i] += b[0][i - 1];
    b[1][m - 1] = 1;
    for(int i = m - 2; i >= 0; i--)
        for(int j = m - 1; j > i; j--)
            if(c[0][i + 1] >= j - i && i - (j - i) + 1 >= 0 && b[1][j])b[1][i] = 1;
    for(int i = m - 2; i >= 0; i--)b[1][i] += b[1][i + 1];
    b[2][0] = 1;
    for(int i = 1; i < n; i++)
        for(int j = 0; j < i; j++)
            if(c[1][i] >= i - j && i + i - j - 1 < n && b[2][j])b[2][i] = 1;
    for(int i = 1; i < n; i++)b[2][i] += b[2][i - 1];
    b[3][n - 1] = 1;
    for(int i = n - 2; i >= 0; i--)
        for(int j = n - 1; j > i; j--)
            if(c[1][i + 1] >= j - i && i - (j - i) + 1 >= 0 && b[3][j])b[3][i] = 1;
    for(int i = n - 2; i >= 0; i--)b[3][i] += b[3][i + 1];
}
class BoardFolding {
public:
    int howMany(int nn, int mm, vector <string>s) {
        n = nn, m = mm;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                a[i][j] = (change(s[i][j / 6]) >> (j % 6)) % 2;
        int ret = 0;
        init();
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++) {
                if((i == 0 && b[0][i] == 0) || (i > 0 && b[0][i] - b[0][i - 1] == 0))continue;
                if((j == 0 && b[2][j] == 0) || (j > 0 && b[2][j] - b[2][j - 1] == 0))continue;
                ret += b[1][i] * b[3][j];
            }
        return ret;
    }
};
