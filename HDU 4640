/*
题意：3个人，17个点，指定一些点必走，除起点1外其他点只能被一个人经过，求最优等待时间
先用bfs预处理出一个人时的最优解，f[i][j]代表走过的状态是i且最后在j的最优值
然后根据一个人预处理出的结果推出两个人的
比如一个人的状态是1011，那么分成两个人走就可以是1001和0011，第1个点是必走的
然后一个人的和两个人的就推出三个人的了
二进制枚举子集的写法第一次碰到
bfs预处理的写法第一次碰到
*/
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<string>
#include<set>
using namespace std;
typedef long long ll;
#define eps 1e-8
const int inf=0x3f3f3f3f;
const int maxn=17;

int f[1<<maxn][maxn],d[maxn][maxn],f1[1<<maxn],f2[1<<maxn];
int n,m;
bool in[1<<maxn][maxn];
queue<int>que;

void init() {
    memset(in,0,sizeof(in));
    for(int i=0;i<(1<<maxn);i++)
    {
        f1[i]=f2[i]=inf;
        for(int j=0;j<maxn;j++)
         f[i][j]=inf;
    }
    for(int i=0;i<maxn;i++)
     for(int j=0;j<maxn;j++)
      d[i][j]=inf;
    while(!que.empty())que.pop();
}

void bfs() {
    que.push(1);
    que.push(0);
    in[1][0]=1;
    f[1][0]=0;
    while(!que.empty()) {
        int x=que.front();
        que.pop();
        int y=que.front();
        que.pop();
        in[x][y]=0;

       // printf("**%d %d\n",x,y);

        for(int i=0; i<n; i++) {
            int nx=(x|(1<<i));
            if(f[nx][i]>f[x][y]+d[y][i]) {
                f[nx][i]=f[x][y]+d[y][i];
                if(!in[nx][i]) {
                    in[nx][i]=1;
                    que.push(nx);
                    que.push(i);
                }
            }
        }
    }
}

int solve(int xuejie) {
    bfs();
    for(int i=0; i<(1<<n); i++)
        for(int j=0; j<n; j++)
            f1[i]=min(f1[i],f[i][j]);

    //printf("** %d\n",f1[13]);

    memcpy(f2,f1,sizeof(f1));
    for(int i=1; i<(1<<n); i++)
        for(int j=i; j; j=(j-1)&i){
            f2[i]=min(f2[i],max(f1[j|1],f1[(i^j)|1]));
        }

   // printf("** %d %d\n",f2[7],f1[9]);

    int ret=inf;
    for(int i=1; i<(1<<n); i++)
        if((xuejie&i)==xuejie) {
            for(int j=i;j;j=(j-1)&i) {
              // printf("** %d %d\n",j|1,(i^j)|1);
                ret=min(ret,max(f2[j|1],f1[(i^j)|1]));
            }
        }
    return ret;
}

int main() {
    //freopen("in.cpp","r",stdin);
    int T,ncase=0;
    scanf("%d",&T);
    while(T--) {
        ncase++;
        init();
        scanf("%d%d",&n,&m);
        for(int i=0; i<m; i++) {
            int x,y,z;
            scanf("%d%d%d",&x,&y,&z);
            x--,y--;
            d[x][y]=min(d[x][y],z);
            d[y][x]=d[x][y];
        }
        int xuejie=0,k;
        scanf("%d",&k);
        while(k--) {
            int x;
            scanf("%d",&x);
            xuejie|=(1<<(x-1));
        }
        int ret=solve(xuejie);
        if(ret==inf)ret=-1;
        printf("Case %d: %d\n",ncase,ret);
    }
    return 0;
}
