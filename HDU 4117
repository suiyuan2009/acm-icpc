/*
题意：对于i<j，若s[i]是s[j]的子串，那么f[j]就可以加上f[i]，问f[i]最大是多少
沿着fail指针相反的方向，就是一条一条的链，
每次沿着fail指针正方向向上找最大很耗时间，
所以在这些链上建线段树。。
*/
#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=20005;
const int maxm=300005;
const int mod=1000000007;

int n,val[maxn],pos[maxn][2];
char s[maxm+maxn];
int next[maxm][26],fail[maxm];
vector<int>e[maxm];
int L[maxm],R[maxm],ncnt;
int root,num;
int f[maxn];

inline int change(char ch)
{
    return ch-'a';
}
int newnode()
{
    for(int i=0; i<26; i++)
        next[num][i]=-1;
    num++;
    return num-1;
}
void init()
{
    ncnt=0;
    num=0;
    root=newnode();
    for(int i=0; i<maxm; i++)e[i].clear();
}
void insert(int id,int val)
{
    int l=pos[id][0],r=pos[id][1];
    int now=root;
    for(int i=l; i<r; i++)
    {
        if(next[now][change(s[i])]==-1)
            next[now][change(s[i])]=newnode();
        now=next[now][change(s[i])];
    }
}
int Q[maxm];
void build()
{
    int head=0,tail=0;
    fail[root]=root;
    for(int i=0; i<26; i++)
    {
        if(next[root][i]==-1)
            next[root][i]=root;
        else
        {
            fail[next[root][i]]=root;
            Q[head++]=next[root][i];
        }
    }
    while(head!=tail)
    {
        int now=Q[tail++];
        // end[now]|=end[fail[now]];
        for(int i=0; i<26; i++)
        {
            if(next[now][i]==-1)
                next[now][i]=next[fail[now]][i];
            else
            {
                fail[next[now][i]]=next[fail[now]][i];
                Q[head++]=next[now][i];
            }
        }
    }
    for(int i=1; i<num; i++)
        e[fail[i]].push_back(i);
}
void dfs(int u)
{
    //printf("** %d\n",u);
    L[u]=++ncnt;
    for(int i=0; i<e[u].size(); i++)
        dfs(e[u][i]);
    R[u]=ncnt;
}

int T[maxm << 1];
int id(int l , int r)
{
    return l + r | l != r;
}
#define MID int mid = (l + r) >> 1;
#define ID id(l , r)
#define Left l , mid
#define Right mid + 1 , r

void update(int l , int r , int top , int bot , int w)
{
    if (top <= l && r <= bot)
    {
        int p = ID;
        T[p] = max(T[p] , w);
        return;
    }
    MID;
    if (top <= mid) update(Left , top , bot , w);
    if (bot > mid) update(Right , top , bot , w);
}

int query(int l , int r , int x)
{
    if (x <= l && r <= x)
    {
        return T[ID];
    }
    MID;
    int ans = T[ID];
    if (x <= mid) ans = max(query(Left , x) , ans);
    if (x > mid) ans = max(query(Right , x) , ans);
    return ans;
}

int main()
{
    // freopen("in.cpp","r",stdin);
    int TT,ncase=0;
    scanf("%d",&TT);
    while(TT--)
    {
        init();
        scanf("%d",&n);
        int len=0;
        for(int i=1; i<=n; i++)
        {
            scanf("%s%d",s+len,&val[i]);
            pos[i][0]=len,pos[i][1]=len+strlen(s+len);
            len=pos[i][1];
            insert(i,-inf);
        }
        s[len]=0;
        build();
        dfs(0);
        int ret=0;
        /*for(int i=1; i<=n; i++)
        {
            f[i]=val[i]+query(i);
            ret=max(ret,f[i]);
            //insert(i,f[i]);
            end[sy[i]]=max(f[i],end[sy[i]]);
        }*/
        //for(int i=0;i<num;i++)
        //printf("**%d: %d %d\n",i,L[i],R[i]);
        memset(T,0,sizeof(T));
        for(int i=1; i<=n; i++)
        {
            f[i]=0;
            int now=root;
            for(int j=pos[i][0]; j<pos[i][1]; j++)
            {
                now=next[now][change(s[j])];
                int tt=query(1,ncnt,L[now]);
                f[i]=max(f[i],tt);
            }
            f[i]+=val[i];
            update(1,ncnt,L[now],R[now],f[i]);
            ret=max(ret,f[i]);
        }
        // for(int i=1; i<=n; i++)
        //    printf("** %d: %d\n",i,f[i]);
        printf("Case #%d: %d\n",++ncase,ret);
    }
    return 0;
}
