/*
题意：有n个怪物，每个怪物有血量，每个单位时间，A可以选择一个怪物砍一刀（或者不砍），
之后所有怪物会被B砍一刀，问A可以砍死多少怪物

贪心预处理出每个怪物在哪个时刻被砍死，然后f[i][j]代表到第i个时刻，我还有j刀没砍的最大收益
*/
#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn=1005;
typedef long long ll;

int n,a[maxn],c[maxn];
int f[maxn][maxn];

void pd(int &ret,int val){
    if(ret<val)ret=val;
}

int main(){
  //  freopen("ACM/in.in","r",stdin);
    int T,ncase=0;
    scanf("%d",&T);
    while(T--){
        scanf("%d",&n);
        for(int i=1;i<=n;i++)scanf("%d",&a[i]);
        sort(a+1,a+n+1);
        memset(c,0,sizeof(c));
        memset(f,-1,sizeof(f));
        for(int i=1;i<=n;i++){
            int lim=(a[i]-1)>>1;
            for(int j=a[i];j>=a[i]-lim;j--){
                if(c[j])continue;
                c[j]=a[i];
                break;
            }
        }
        f[0][0]=0;
        for(int i=0;i<maxn-1;i++)
            for(int j=0;j<=i;j++){
                if(f[i][j]==-1)continue;
                pd(f[i+1][j+1],f[i][j]);
                if(c[i+1]&&j>=c[i+1]-i-1)
                pd(f[i+1][j-(c[i+1]-i-1)],f[i][j]+1);
            }
        int ret=1;
        for(int i=0;i<maxn;i++)pd(ret,f[maxn-1][i]);
        printf("Case #%d: %d\n",++ncase,ret);
    }
    return 0;
}
