/*
题意：给出一个序列，最长的子串是1到k的排列，k是多少

处理出每个位置向左和向右相同的值的位置，然后枚举1所在的位置，假设排列中最大的值是在1的左边，
遍历左边，不断取最大值，sum判断更新答案，并且区间中不能有重点。
*/
#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn=100005;
typedef long long ll;

int n,a[maxn],pos[maxn],L[maxn],R[maxn];
ll s[maxn];

int main(){
    //freopen("ACM/in.in","r",stdin);
    scanf("%d",&n);
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    for(int i=1;i<=n;i++)s[i]=s[i-1]+a[i];
    for(int i=1;i<=n;i++)pos[i]=n+1;
    for(int i=n;i>=1;i--){
        R[i]=pos[a[i]];
        pos[a[i]]=i;
    }
    for(int i=1;i<=n;i++)pos[i]=0;
    for(int i=1;i<=n;i++){
        L[i]=pos[a[i]];
        pos[a[i]]=i;
    }
    int ret=0;
    for(int i=1;i<=n;i++){
        if(a[i]!=1)continue;
        ret=max(ret,1);
        int l=L[i],r=R[i],mx=1;
        for(int j=i;;j--){
            if(j<=l)break;
            mx=max(mx,a[j]),l=max(l,L[j]),r=min(r,R[j]);
            ll tt=mx;
            if(l>=i||r<=i)break;
            if(j+mx-1<r&&s[j+mx-1]-s[j-1]==tt*(tt+1)/2)ret=max(ret,mx);
        }
        l=L[i],r=R[i],mx=1;
        for(int j=i;;j++){
            if(j>=r)break;
            mx=max(mx,a[j]),l=max(l,L[j]),r=min(r,R[j]);
            ll tt=mx;
            if(l>=i||r<=i)break;
            if(j-mx+1>l&&s[j]-s[j-mx]==tt*(tt+1)/2)ret=max(ret,mx);
        }
    }
    printf("%d\n",ret);
    return 0;
}
