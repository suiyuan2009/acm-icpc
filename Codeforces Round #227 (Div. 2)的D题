/*
题意：给出一个有向图，最少需要去掉或者增加多少边，使得图中存在一个中心，中心到其他所有点有边，其他所有点到中心也有边，
并且除了中心，其他点的入度和出度为都为2
枚举中心，二分图匹配
*/
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include <queue>
#include <map>
using namespace std;
const double eps = 1e-6;
typedef __int64 ll;
const double PI = acos(-1);
const int maxn = 505;
const int maxm = 1005;
const int inf = 0x3fffffff;

int n, m, f[maxn][maxn];
int nx, ny, g[maxn][maxn], sy[maxn], cx[maxn], cy[maxn];

int path(int u)
{
    for (int v = 1; v <= ny; v++)if (g[u][v] && !sy[v])
        {
            sy[v] = 1;
            if (!cy[v] || path(cy[v]))
            {
                cx[u] = v;
                cy[v] = u;
                return 1;
            }
        }
    return 0;
}

int MaximumMatch()
{
    int i, ret = 0;
    memset(cx, 0, sizeof (cx));
    memset(cy, 0, sizeof (cy));
    for (i = 1; i <= nx; i++)if (!cx[i])
        {
            memset(sy, 0, sizeof (sy));
            ret += path(i);
        }
    return ret;
}

int main()
{
    //freopen("in.txt", "r", stdin);
    // freopen("out.txt", "w", stdout);
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; i++)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        f[u][v] = 1;
    }
    int ret = inf;
    for (int i = 1; i <= n; i++)
    {
        //memset(g, 0, sizeof(g));
        nx = ny = n;
        int ans = 0, cnt = 0;
        for (int j = 1; j <= n; j++)
            for (int k = 1; k <= n; k++)
            {
                g[j][k] = f[j][k];
                if (j == i || k == i)continue;
                if (g[j][k])cnt++;
            }
        for (int j = 1; j <= n; j++)
        {
            if (!g[i][j])ans++;
            if (!g[j][i] && j != i)ans++;
            g[i][j] = g[j][i] = 0;
        }
        ans += cnt + n - 1 - 2 * MaximumMatch();
        ret = min(ret, ans);
    }
    printf("%d\n", ret);
    return 0;
}
