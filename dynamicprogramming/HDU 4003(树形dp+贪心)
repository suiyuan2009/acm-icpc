/*
题意：给带权有根树，k个机器人从根出发，遍历所有的点，求最小花费

每次只会有一个机器人回来
*/
#pragma comment(linker,"/STACK:10240000000,10240000000")
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
using namespace std;
const int maxn = 10005;
const int maxm = maxn+maxn;
const int inf = 0x3fffffff;
typedef long long ll;

int root,n,m;
int head[maxn],ev[maxm],ew[maxm],nxt[maxm],num;
int f[maxn][12][2];
void addedge(int u,int v,int w){
    nxt[++num]=head[u];
    head[u]=num;
    ev[num]=v,ew[num]=w;
}

void init(){
    memset(head,0,sizeof(head));
    memset(f,-1,sizeof(f));
    num=0;
    for(int i=1;i<n;i++){
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        addedge(u,v,w),addedge(v,u,w);
    }
}

void pd(int &ret,int val){
    if(ret==-1||ret>val)ret=val;
}

int sv[maxn],sw[maxn],cs,g[2][12][2];
void dfs(int u,int fa){
    bool sg=0;
    for(int i=head[u];i;i=nxt[i]){
        int v=ev[i],w=ew[i];
        if(v==fa)continue;
        sg=1;
        dfs(v,u);
    }
    if(!sg){
        for(int i=1;i<=m;i++)
            for(int j=0;j<2;j++)
                f[u][i][j]=0;
        return;
    }
    cs=0;
    for(int i=head[u];i;i=nxt[i]){
        int v=ev[i],w=ew[i];
        if(v==fa)continue;
        sv[++cs]=v,sw[cs]=w;
    }
    memset(g,-1,sizeof(g));
    g[0][0][0]=0;
    int cur=0;
    for(int i=1;i<=cs;i++){
        cur^=1;
        for(int j=0;j<=m;j++)
            for(int k=0;k<2;k++)
                g[cur][j][k]=-1;
        for(int j=0;j<=m;j++)
            for(int k=0;k<2;k++){
                if(g[1-cur][j][k]==-1)continue;
                for(int r=1;r+j-1<=m;r++)
                    for(int s=0;s<2;s++){
                        int tt=f[sv[i]][r][s];
                        if(tt==-1)continue;
                        if(k==0&&s==0){
                            pd(g[cur][r+j][0],g[1-cur][j][k]+tt+sw[i]*r);
                        }
                        else if(k==0&&s==1){
                            pd(g[cur][r+j][1],g[1-cur][j][k]+tt+sw[i]*r+sw[i]);
                            if(j)pd(g[cur][r+j-1][0],g[1-cur][j][k]+tt+sw[i]*r+sw[i]);
                        }
                        else if(k==1&&s==0){
                            pd(g[cur][r+j][1],g[1-cur][j][k]+tt+sw[i]*r);
                            pd(g[cur][r+j-1][0],g[1-cur][j][k]+tt+sw[i]*r);
                        }
                        else{
                            pd(g[cur][r+j-1][1],g[1-cur][j][k]+tt+sw[i]*r+sw[i]);
                        }
                    }
            }
    }
    for(int i=1;i<=m;i++)
        if(g[cur][i][1]!=-1)pd(g[cur][i-1][0],g[cur][i][1]);
    for(int i=0;i<=m;i++)
        for(int j=0;j<2;j++)
            f[u][i][j]=g[cur][i][j];
}

int main(){
   // freopen("ACM/in.in","r",stdin);
    while(~scanf("%d%d%d",&n,&root,&m)){
        init();
        dfs(root,0);
       // printf("** %d\n",f[2][1][1]);
        int ret=-1;
        for(int i=1;i<=m;i++)
            for(int j=0;j<2;j++){
                if(f[root][i][j]==-1)continue;
                //  printf("** %d %d %d : %d\n",root,i,j,f[root][i][j]);
                pd(ret,f[root][i][j]);
            }
        printf("%d\n",ret);
    }
    return 0;
}
