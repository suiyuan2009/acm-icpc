#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <queue>

using namespace std;
const int maxn=205;

int n,m,sx,sy,tx,ty;
int a[maxn][maxn];
int f[maxn][maxn][4][2];

int dir[4][2]= {{0,1},{-1,0},{0,-1},{1,0}};

int get(int x1,int y1,int x2,int y2)
{
    if(x1==x2)
    {
        if(y1<y2)return a[x1+x1-1][y1];
        else return a[x1+x1-1][y1-1];
    }
    if(x1<x2)return a[x1+x1][y1];
    return a[x1+x1-2][y1];
}

struct P
{
    int x,y,z,w;
    P() {}
    P(int _x,int _y,int _z,int _w)
    {
        x=_x,y=_y,z=_z,w=_w;
    }
};
queue<P>que;
bool in[maxn][maxn][4][2];

bool pd(int &ret,int val)
{
    if(ret==-1||ret>val)
    {
        ret=val;
        return 1;
    }
    return 0;
}

void spfa(int sx,int sy)
{
    memset(in,0,sizeof(in));
    memset(f,-1,sizeof(f));
    while(!que.empty())que.pop();
    for(int i=0; i<4; i++)
    {
        int x=sx+dir[i][0];
        int y=sy+dir[i][1];
        if(x<1||x>n||y<1||y>m)continue;
        int tt=get(sx,sy,x,y);
        if(!tt)continue;
        pd(f[x][y][i][1],tt+tt);
        in[x][y][i][1]=1;
        que.push(P(x,y,i,1));
    }
    while(!que.empty())
    {
        P u=que.front();
        que.pop();
        in[u.x][u.y][u.z][u.w]=0;
        for(int i=0; i<4; i++)
        {
            int x=u.x+dir[i][0];
            int y=u.y+dir[i][1];
            if(x<1||x>n||y<1||y>m)continue;
            int tt=get(u.x,u.y,x,y);
            if(!tt)continue;
            int ret=0;
            if((i+u.z)&1)
            {
                int px=u.x-dir[u.z][0];
                int py=u.y-dir[u.z][1];
                if(u.w)ret=tt*2+f[u.x][u.y][u.z][u.w];
                else ret=tt*2+get(px,py,u.x,u.y)+f[u.x][u.y][u.z][u.w];
                if(pd(f[x][y][i][1],ret)&&!in[x][y][i][1])
                {
                    in[x][y][i][1]=1;
                    que.push(P(x,y,i,1));
                }
            }
            else if(i!=u.z)
            {
                if(u.w)
                {
                    if(pd(f[x][y][i][1],f[u.x][u.y][u.z][u.w]+tt*2)&&!in[x][y][i][1])
                    {
                        in[x][y][i][1]=1;
                        que.push(P(x,y,i,1));
                    }
                }
                else
                {
                    if(pd(f[x][y][i][1],f[u.x][u.y][u.z][u.w]+tt*3)&&!in[x][y][i][1])
                    {
                        in[x][y][i][1]=1;
                        que.push(P(x,y,i,1));
                    }
                    if(pd(f[x][y][i][0],f[u.x][u.y][u.z][u.w]+tt*2)&&!in[x][y][i][0])
                    {
                        in[x][y][i][0]=1;
                        que.push(P(x,y,i,0));
                    }
                }
            }
            else
            {
                if(pd(f[x][y][i][0],f[u.x][u.y][u.z][u.w]+tt)&&!in[x][y][i][0])
                {
                    in[x][y][i][0]=1;
                    que.push(P(x,y,i,0));
                }
                if(pd(f[x][y][i][1],f[u.x][u.y][u.z][u.w]+tt*2)&&!in[x][y][i][1])
                {
                    in[x][y][i][1]=1;
                    que.push(P(x,y,i,1));
                }
            }
        }
    }
}

int main()
{
    //freopen("in.cpp","r",stdin);
    int ncase=0;
    while(scanf("%d%d%d%d%d%d",&n,&m,&sx,&sy,&tx,&ty))
    {
        //printf("%d %d\n",n,m);
        if(n==0&&m==0&&sx==0&&sy==0&&tx==0&&ty==0)break;
        //printf("&&&&&&&&& %d\n",ncase);
        for(int i=1; i<=n+n-1; i++)
        {
            int lim=((i&1)?m-1:m);
            for(int j=1; j<=lim; j++)
            {
                scanf("%d",&a[i][j]);
                //printf("%d ",a[i][j]);
            }
            // printf("\n");
        }
        if(sx==tx&&sy==ty)printf("Case %d: 0\n",++ncase);
        else
        {
            spfa(sx,sy);
            int ret=-1;
            for(int i=0; i<4; i++)
            {
                if(f[tx][ty][i][0]!=-1)
                {
                    int px=tx-dir[i][0];
                    int py=ty-dir[i][1];
                    int tt=get(px,py,tx,ty);
                    pd(ret,tt+f[tx][ty][i][0]);
                }
                if(f[tx][ty][i][1]!=-1)pd(ret,f[tx][ty][i][1]);
            }
            // printf("*** %d\n",f[4][4][3][0]);
            if(ret==-1)printf("Case %d: Impossible\n",++ncase);
            else printf("Case %d: %d\n",++ncase,ret);
        }
    }
    return 0;
}
