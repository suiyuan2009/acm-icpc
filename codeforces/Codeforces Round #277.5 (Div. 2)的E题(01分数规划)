/*
裸分数规划
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<cmath>
#include<map>
#include<stack>
using namespace std;
typedef long long ll;
const int maxn = 1005;
const double eps=1e-10;

int n,L,a[maxn],b[maxn];
double f[maxn];
int pnt[maxn];

bool solve(double x){
    for(int i=1;i<=n;i++)f[i]=-100000.0,pnt[i]=-1;
    for(int i=0;i<n;i++){
        if(f[i]<-1000.0)continue;
        for(int j=i+1;j<=n;j++){
            double tt=x*b[j]-sqrt((double)abs(L-(a[j]-a[i])));
            if(f[j]<f[i]+tt){
                f[j]=f[i]+tt;
                pnt[j]=i;
            }
        }
    }
    return f[n]>=0;
}

vector<int>ans;
int main() {
   // freopen("ACM/in.in", "r", stdin);
    scanf("%d%d",&n,&L);
    for(int i=1;i<=n;i++)scanf("%d%d",&a[i],&b[i]);
    double ret=-100,l=0,r=1000000000.0;
    while(l+eps<r){
        double m=(l+r)/2;
        if(solve(m)){
            ret=m;
           // printf("&&%lf %lf\n",ret,f[n]);
            r=m;
        }else l=m;
    }
   // printf("** %lf %lf\n",ret,f[n]);
    ans.clear();
    int cur=n;
    while(cur){
        ans.push_back(cur);
        cur=pnt[cur];
    }
    for(int i=(int)ans.size()-1;i>=0;i--)
        printf("%d%c",ans[i],i?' ':'\n');
    return 0;
}
