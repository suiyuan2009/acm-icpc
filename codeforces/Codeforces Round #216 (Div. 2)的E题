/*
题意：给出n个线段，m个询问，每次询问给出c个点，问有几条线段至少包含1个询问中的点
可以正着做也可以反着做，
反着做，就是新建一些线段，代表询问点之间的间隔区间，转化成有多少线段被这些区间包含；
正着做，就是询问点被多少条线段包含-相邻询问点被多少条线段包含。
*/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
const int maxn = 300005;
const int maxm = 1000005;

struct  BIT
{
    int c[maxm];
    void init()
    {
        for (int i = 1; i < maxm; i++)c[i] = 0;
    }
    int lowbit(int x)
    {
        return x & (-x);
    }
    void add(int x, int val)
    {
        while (x < maxm)
        {
            c[x] += val;
            x += lowbit(x);
        }
    }
    int sum(int x)
    {
        int ret = 0;
        while (x > 0)
        {
            ret += c[x];
            x -= lowbit(x);
        }
        return ret;
    }
} bit;

struct P
{
    int l, r, id;
    P() {}
    P(int _l, int _r, int _id)
    {
        l = _l, r = _r, id = _id;
    }
    bool operator<(const P &a)const
    {
        if (l == a.l)return r < a.r;
        return l < a.l;
    }
} p[maxn];
vector<P>q;
int ans[maxn];
int n, m;

int main()
{
    //freopen("in.txt", "r", stdin);
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++)
        scanf("%d%d", &p[i].l, &p[i].r);
    for (int i = 1; i <= m; i++)
    {
        int c;
        int pre = -1;
        scanf("%d", &c);
        for (int j = 1; j <= c; j++)
        {
            int x;
            scanf("%d", &x);
            if (j == 1 && x > 1)q.push_back(P(1, x - 1, i));
            if (j == c && x != maxm - 1)q.push_back(P(x + 1, maxm - 1, i));
            if (j > 1 && pre + 1 < x)q.push_back(P(pre + 1, x - 1, i));
            pre = x;
        }
    }

    // for (int i = 0; i < q.size(); i++)
    //  printf("%d %d %d\n", q[i].l, q[i].r, q[i].id);

    sort(p + 1, p + n + 1);
    sort(q.begin(), q.end());
    for (int i = 1; i <= n; i++)
        bit.add(p[i].r, 1);
    int pos = 1;
    for (int i = 0; i < q.size(); i++)
    {
        while (pos <= n && p[pos].l < q[i].l)
        {
            bit.add(p[pos].r, -1);
            pos++;
        }
        ans[q[i].id] += bit.sum(q[i].r);
    }
    for (int i = 1; i <= m; i++)
        printf("%d\n", n - ans[i]);
    return 0;
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
const int maxn = 300005;
const int maxm = 1000005;

int n, m;
struct  P
{
    int l, r, id;
    P() {}
    P(int _l, int _r, int _id)
    {
        l = _l, r = _r, id = _id;
    }
    bool operator<(const P &a)const
    {
        if (l == a.l)return r < a.r;
        return l < a.l;
    }
} p[maxn];
vector<P>q;
vector<pair<int, int> >ptr;

struct  BIT
{
    int c[maxm];
    void init()
    {
        for (int i = 1; i < maxm; i++)c[i] = 0;
    }
    int lowbit(int x)
    {
        return x & (-x);
    }
    void add(int x)
    {
        while (x < maxm)
        {
            c[x]++;
            x += lowbit(x);
        }
    }
    int sum(int x)
    {
        int ret = 0;
        while (x > 0)
        {
            ret += c[x];
            x -= lowbit(x);
        }
        return ret;
    }
} bit;

int ans[maxn];
int main()
{
    //freopen("in.txt", "r", stdin);
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++)
        scanf("%d%d", &p[i].l, &p[i].r);
    for (int i = 1; i <= m; i++)
    {
        int c;
        scanf("%d", &c);
        int pre = -1;
        for (int j = 1; j <= c; j++)
        {
            int x;
            scanf("%d", &x);
            ptr.push_back(make_pair(x, i));
            if (j > 1)q.push_back(P(pre, x, i));
            pre = x;
        }
    }
    // printf("**\n");
    sort(q.begin(), q.end());
    sort(ptr.begin(), ptr.end());
    sort(p + 1, p + n + 1);
    int pos = 1;
    for (int i = 0; i < ptr.size(); i++)
    {
        while (pos <= n && p[pos].l <= ptr[i].first)
        {
            bit.add(p[pos].r);
            pos++;
        }
        int tt = bit.sum(maxm - 1) - bit.sum(ptr[i].first - 1);
        ans[ptr[i].second] += tt;
    }

    //for (int i = 1; i <= n; i++)
    // printf("%d\n", ans[i]);

    pos = 1, bit.init();
    for (int i = 0; i < q.size(); i++)
    {
        while (pos <= n && p[pos].l <= q[i].l)
        {
            bit.add(p[pos].r);
            pos++;
        }
        int tt = bit.sum(maxm - 1) - bit.sum(q[i].r - 1);
        ans[q[i].id] -= tt;
    }
    for (int i = 1; i <= m; i++)
        printf("%d\n", ans[i]);
    return 0;
}
