/*
Iahub and Iahubina went to a picnic in a forest full of trees. Less than 5 minutes passed before Iahub remembered of trees from programming. Moreover, he invented a new problem and Iahubina has to solve it, otherwise Iahub won't give her the food.
Iahub asks Iahubina: can you build a rooted tree, such that
each internal node (a node with at least one son) has at least two sons;
node i has ci nodes in its subtree?
Iahubina has to guess the tree. Being a smart girl, she realized that it's possible no tree can follow Iahub's restrictions. In this way, Iahub will eat all the food. You need to help Iahubina: determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes.

记f[i]为状态i中的1还没有找到父亲是否可能
*/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
typedef long long ll;
const int maxn=24;
const int inf=0x3fffffff;

int n,a[maxn];
vector<int>g[25];
bool f[1<<24];
int c[1<<24];

void dfs(int cnt,int mask,int sum,int tt)
{
    if(cnt==n)return;
    c[mask]=tt;
    dfs(cnt+1,mask,sum,tt);
    if(sum+a[cnt]<=n)
    {
        g[sum+a[cnt]].push_back(mask|(1<<cnt));
    }
    dfs(cnt+1,mask|(1<<cnt),sum+a[cnt],tt+1);
}

int main()
{
    //freopen("in.cpp","r",stdin);
    scanf("%d",&n);
    for(int i=0; i<n; i++)scanf("%d",&a[i]);
    sort(a,a+n);
    dfs(0,0,0,0);
    int pos=-1;
    for(int i=0; i<n; i++)
        if(a[i]!=1)
        {
            pos=i-1;
            break;
        }
    if(n==1)
    {
         if(a[0]==1)printf("YES\n");
         else printf("NO\n");
    }
    else if(pos==-1)printf("NO\n");
    else
    {
        int start=0;
        for(int i=0; i<=pos; i++)
            start|=(1<<i);
        f[start]=1;
        for(int i=start; i<(1<<n); i++)
        {
            if(!f[i])continue;
            int p=-1;
            for(int j=0; j<n; j++)
                if(i&(1<<j))p=j;
            //printf("** %d\n",p);
            if(p+1<n)
            {
                for(int j=0; j<g[a[p+1]-1].size(); j++)
                {
                    //  printf("** %d %d\n",g[a[p+1]-1][j],i);
                    if((g[a[p+1]-1][j]|i)==i&&c[g[a[p+1]-1][j]]>1)
                    {
                        f[(i^g[a[p+1]-1][j])|(1<<(p+1))]=1;
                        // printf("** %d\n",(i^g[a[p+1]-1][j])|(1<<(p+1)));
                    }
                }
            }
        }
        //printf("%d\n",f[7]);
        //printf("%d\n",g[3][0]);
//   printf("**\n");
        if(f[1<<(n-1)])printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
