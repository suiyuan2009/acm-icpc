/*
题意：3种操作，把以节点i为根的子树内点置1，把节点1到i的路径上点置0，询问节点值

****注意push down操作

置1操作：dfs序列+线段树区间整体赋值单点查询
置0操作：dfs序列+线段树单点赋值查询区间最大值
线段树上赋的值是操作编号，最后判断第一个操作的线段树返回值是否大于第二个
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef double ldb;
typedef __int64 ll;
const int inf=0x3f3f3f3f;
const int maxn=500005;
const int maxm=maxn+maxn;
const int mod=1000000007;

int n;
int ps[maxn][2],num;
vector<int>g[maxn];

void dfs(int u,int fa)
{
    ps[u][0]=++num;
    for(int i=0; i<g[u].size(); i++)
    {
        int v=g[u][i];
        if(v==fa)continue;
        dfs(v,u);
    }
    ps[u][1]=++num;
}

struct ST
{
    int l,r,val;
} st[maxm*3][2];

void build(int idx,int idy,int l,int r)
{
    st[idx][idy].l=l,st[idx][idy].r=r;
    if(l==r)return;
    int m=(l+r)/2;
    build(idx*2,idy,l,m);
    build(idx*2+1,idy,m+1,r);
}

void update(int idx,int idy,int l,int r,int val)
{
    if(st[idx][idy].l==l&&st[idx][idy].r==r)
    {
        st[idx][idy].val=val;
        return;
    }
    if(st[idx][idy].l==st[idx][idy].r)
    {
        if(l==r&&st[idx][idy].l==l)st[idx][idy].val=val;
        return;
    }
    int m=(st[idx][idy].l+st[idx][idy].r)/2;
    if(st[idx][idy].val!=-1)
    {
        st[idx*2][idy].val=st[idx*2+1][idy].val=st[idx][idy].val;
    }
    if(r<=m)update(idx*2,idy,l,r,val);
    else if(l>m)update(idx*2+1,idy,l,r,val);
    else
    {
        update(idx*2,idy,l,m,val);
        update(idx*2+1,idy,m+1,r,val);
    }
    if(st[idx*2][idy].val==st[idx*2+1][idy].val)
        st[idx][idy].val=st[idx*2][idy].val;
    else st[idx][idy].val=-1;
}

int query(int idx,int idy,int pos)
{
    if(st[idx][idy].val!=-1)return st[idx][idy].val;
    int m=(st[idx][idy].l+st[idx][idy].r)/2;
    if(pos<=m)return query(idx*2,idy,pos);
    return query((idx<<1)+1,idy,pos);
}

void update_2(int idx,int idy,int pos,int val)
{
    if(st[idx][idy].l==st[idx][idy].r)
    {
        if(st[idx][idy].l==pos)st[idx][idy].val=val;
        return;
    }
    int m=((st[idx][idy].l+st[idx][idy].r)>>1);
    if(pos<=m)update_2(idx<<1,idy,pos,val);
    else update_2((idx<<1)+1,idy,pos,val);
    st[idx][idy].val=max(st[idx<<1][idy].val,st[(idx<<1)+1][idy].val);
}

int query_2(int idx,int idy,int l,int r)
{
    if(st[idx][idy].l==l&&st[idx][idy].r==r)return st[idx][idy].val;
    int m=((st[idx][idy].l+st[idx][idy].r)>>1);
    if(r<=m)return query_2(idx<<1,idy,l,r);
    else if(l>m)return query_2((idx<<1)+1,idy,l,r);
    return max(query_2(idx<<1,idy,l,m),query_2((idx<<1)+1,idy,m+1,r));
}


int main()
{
    //freopen("in.cpp","r",stdin);
    scanf("%d",&n);
    for(int i=1; i<n; i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,0);

    // for(int i=1;i<=n;i++)
    // printf("%d: %d %d\n",i,ps[i][0],ps[i][1]);

    build(1,0,1,num);
    build(1,1,1,num);
    int m;
    scanf("%d",&m);
    for(int i=1; i<=m; i++)
    {
        int f,x;
        scanf("%d%d",&f,&x);

        //printf("** %d %d\n",f,x);

        if(f==1)update(1,1,ps[x][0],ps[x][1],i);
        else if(f==2)update_2(1,0,ps[x][0],i);
        else  printf("%d\n",query(1,1,ps[x][0])>query_2(1,0,ps[x][0],ps[x][1]));
        // for(int x=1; x<=n; x++)
        // {
        // int l=query(1,1,ps[x][0]);
        // int r=query_2(1,0,ps[x][0],ps[x][1]);
        // }
    }
    return 0;
}
