/*
题意：n*m的网格，从(1,1)走到(n,m)，只能向下或者向右，问2元不相交路径对有多少
Lindström–Gessel–Viennot lemma
http://en.wikipedia.org/wiki/Lindstr%C3%B6m%E2%80%93Gessel%E2%80%93Viennot_lemma
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef __int64 ll;
const int inf=0x3f3f3f3f;
const int maxn=3010;
const int mod=1000000007;

char s[maxn][maxn];
int f[maxn][maxn];
int n,m;

int dp(int sx,int sy,int tx,int ty) {
    memset(f,0,sizeof(f));
    if(s[sx][sy]!='#')f[sx][sy]=1;
    for(int i=sx; i<=tx; i++)
        for(int j=sy; j<=ty; j++) {
            if(f[i][j]==0)continue;
            if(i<tx&&s[i+1][j]!='#')
                f[i+1][j]=(f[i+1][j]+f[i][j])%mod;
            if(j<ty&&s[i][j+1]!='#')
                f[i][j+1]=(f[i][j+1]+f[i][j])%mod;
        }
    return f[tx][ty];
}

int main() {
//freopen("in.cpp","r",stdin);
    scanf("%d%d",&n,&m);
    for(int i=0; i<n; i++)scanf("%s",s[i]);
    ll ret=(((ll)dp(1,0,n-1,m-2)*dp(0,1,n-2,m-1)-(ll)dp(1,0,n-2,m-1)*dp(0,1,n-1,m-2))%mod+mod)%mod;
    printf("%I64d\n",ret);
    return 0;
}
