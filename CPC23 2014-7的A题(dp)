/*
题意：初始时有n个数，都是2^i次,i<=10，每次可以进行三种操作，删除栈顶元素，合并栈顶两个相同元素，生产一个新的数，
生成数的时候，有p的概率是1,1-p的概率是2，删除操作需要1的花费，问最后栈中只剩下1个数，且是1024的期望花费。

先求出生成1的期望和生成2的期望，然后预处理出生成2^i的期望以及手上有i变成j的期望，记f[i][j]为到第i个位置且栈顶是j
的花费，每次直接可以删除栈顶元素，将栈顶元素变成下一个数，合并后删除或者不删。【注意计算生成1和2的期望花费。】
PS：出题人没写spj以及标程碰到n==0会直接退出，，
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<cmath>
#include<map>
#include<stack>
#include<bitset>
using namespace std;
typedef long long ll;
const int maxn = 100005;
const int maxm = 12;
const double eps = 1e-8;

int n,a[maxn],mp[maxn];
double p,e[maxm],d[maxm][maxm],f[maxn][maxm];

void pd(double&ret,double val){
    if(ret<-eps||ret>val)ret=val;
}

void init(){
    for(int i=0;i<maxm;i++)mp[1<<i]=i+1;
    p/=100;
    e[1]=(1-p)/p,e[2]=e[1]*2;
    if(p+eps<1.0)pd(e[2],p/(1-p)),pd(e[2],1-p);
    for(int i=3;i<maxm;i++)e[i]=e[i-1]+e[i-1];
    for(int i=0;i<maxm;i++)
        for(int j=0;j<maxm;j++)
            d[i][j]=(i==j?0:-1000);
    for(int i=1;i<maxm;i++)d[0][i]=e[i],d[i][0]=1;
    for(int i=2;i<maxm;i++)d[i-1][i]=e[i-1];
    for(int k=0;k<maxm;k++)
        for(int i=0;i<maxm;i++)
            for(int j=0;j<maxm;j++)
                if(d[i][k]>-eps&&d[k][j]>-eps){
                    pd(d[i][j],d[i][k]+d[k][j]);
                }
    for(int i=0;i<=n+1;i++)
        for(int j=0;j<maxm;j++)
            f[i][j]=-1000;
}

int main() {
   // freopen("data.in", "r", stdin);
  //freopen("out2.out","w",stdout);
    while(scanf("%d%lf",&n,&p)!=EOF){
        for(int i=1;i<=n;i++)
            scanf("%d",&a[i]);
        init();
        for(int i=0;i<maxm;i++)f[n+1][i]=d[0][i];
        for(int i=n+1;i>1;i--){
            int tt=mp[a[i-1]];
            /*for(int j=0;j<maxm;j++)
              for(int k=0;k<maxm;k++){
              pd(f[i-1][k],f[i][j]+(j>0)+d[tt][k]);
              pd(f[i-1][k],f[i][j]+d[j][tt]+1+d[0][k]);
              if(tt<maxm-1)pd(f[i-1][k],f[i][j]+d[j][tt]+d[tt+1][k]);
              }*/
            for(int j=0;j<maxm;j++){
                pd(f[i-1][tt],f[i][j]+(j>0));
                pd(f[i-1][0],f[i][j]+d[j][tt]+1);
                if(tt<maxm-1)pd(f[i-1][tt+1],f[i][j]+d[j][tt]);
            }
            for(int j=0;j<maxm;j++){
                pd(f[i-1][j],f[i-1][0]+d[0][j]);
                pd(f[i-1][j],f[i-1][tt]+d[tt][j]);
                if(tt<maxm-1)pd(f[i-1][j],f[i-1][tt+1]+d[tt+1][j]);
            }
        }
        printf("%.9lf\n",f[1][11]);
    }
    return 0;
}
