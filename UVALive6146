
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<vector>
using namespace std;
const int maxn=505;
const int maxm=69984;
const int mod=10007;

int p[] = {2,3,5,7,11,13,17,19};
int b[]={7776,1296,324,81,27,9,3,1};
int c[25][10];
int a[]={8,5,3,3,2,2,2,2};

int code()
{
    int ret=0;
    for(int i=0;i<8;i++)
        ret+=b[i]*a[i];
    return ret;
}
void decode(int n)
{
    for(int i=0;i<8;i++)
    {
        a[i]=n/b[i];
        n%=b[i];
    }
}

void pd(int &ret,int val)
{
    ret+=val;
    if(ret>=mod)ret-=mod;
}

struct P
{
    int a[8],x;
    bool operator<(const P&b)const
    {
        return x<b.x;
    }
}q[maxn];
int n;
int f[2][maxm][2];

int main()
{
    //printf("%d",code());
    //return 0;
    freopen("ACM/in.in","r",stdin);
    for(int i=1;i<25;i++)
    {
        c[i][0]=1;
        for(int j=1;j<10;j++)
            c[i][j]=c[i][j-1]*i%mod;
    }
    int T,ncase=0;
    scanf("%d",&T);
    while(T--)
    {
        //printf("***\n");
        scanf("%d",&n);
        for(int i=1;i<=n;i++)
        {
            int x;
            scanf("%d",&x);
            memset(q[i].a,0,sizeof(q[i].a));
            for(int j=0;j<8;j++)
            {
                while(x%p[j]==0)
                {
                    q[i].a[j]++;
                    x/=p[j];
                }
            }
            q[i].x=x;
        }
        sort(q+1,q+n+1);
        memset(f,0,sizeof(f));
        f[0][0][0]=1;
        // printf("%d\n",n);
        for(int i=0;i<n;i++)
        {
            //printf("** %d\n",i);
            int now=i&1;
            int nxt=1-now;
            for(int j=0;j<maxm;j++)f[nxt][j][0]=f[nxt][j][1]=0;
            for(int j=0;j<maxm;j++)
            {
                if(f[now][j][0]==0&&f[now][j][1]==0)continue;
                if(q[i+1].x==1)
                {
                    pd(f[nxt][j][0],f[now][j][0]);
                    decode(j);
                    int tt=1;
                    for(int k=0;k<8;k++)
                    {
                        if(q[i+1].a[k]>a[k])tt=tt*c[p[k]][q[i+1].a[k]-a[k]]%mod;
                        a[k]=max(a[k],q[i+1].a[k]);
                    }
                    int to=code();
                    pd(f[nxt][to][0],f[now][j][0]*tt%mod);
                }
                else if(i==0||q[i+1].x!=q[i].x)
                {
                    pd(f[nxt][j][0],f[now][j][0]);
                    pd(f[nxt][j][0],f[now][j][1]);
                    decode(j);
                    int tt=q[i+1].x;
                    for(int k=0;k<8;k++)
                    {
                        if(q[i+1].a[k]>a[k])tt=tt*c[p[k]][q[i+1].a[k]-a[k]]%mod;
                        a[k]=max(a[k],q[i+1].a[k]);
                    }
                    int to=code();
                    pd(f[nxt][to][1],f[now][j][0]*tt%mod);
                    pd(f[nxt][to][1],f[now][j][1]*tt%mod);
                }
                else
                {
                    pd(f[nxt][j][0],f[now][j][0]);
                    pd(f[nxt][j][1],f[now][j][1]);
                    decode(j);
                    int tt=1;
                    for(int k=0;k<8;k++)
                    {
                        if(q[i+1].a[k]>a[k])tt=tt*c[p[k]][q[i+1].a[k]-a[k]]%mod;
                        a[k]=max(a[k],q[i+1].a[k]);
                    }
                    int to=code();
                    pd(f[nxt][to][1],f[now][j][0]*tt%mod*q[i+1].x%mod);
                    pd(f[nxt][to][1],f[now][j][1]*tt%mod);
                }
            }
        }
        //printf("**********\n");
        int ret=mod-1;
        for(int i=0;i<maxm;i++)
        {
            pd(ret,f[n&1][i][0]);
            pd(ret,f[n&1][i][1]);
        }
        printf("Case %d: %d\n",++ncase,ret);
    }
    return 0;
}
