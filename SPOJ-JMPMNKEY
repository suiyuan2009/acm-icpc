/*
题意：打一枪，猴子向相邻节点移动，求能打死猴子的最短方案，并要求字典序最小
n<=21，直接bfs，状态就是当前猴子可能的位置都有哪些
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
using namespace std;
#define eps 1e-7
typedef unsigned long long ll;
const int inf=0x3f3f3f3f;
const int maxn=21;
const int mod=1000000007;
const int maxm=(maxn+5)*(maxn+5)*2;

int n,m;
int f[(1<<maxn)+5];
int pnt[(1<<maxn)+5][2];
bool vis[maxn+5],sign;

int head[maxn],nxt[maxm],ev[maxm],num;

void init()
{
    for(int i=0; i<maxm; i++)nxt[i]=-1;
    for(int i=0; i<maxn; i++)head[i]=-1;
    // memset(head,-1,sizeof(head));
    for(int i=0; i<(1<<n); i++)f[i]=-1;
    for(int i=0; i<n; i++)vis[i]=0;
    sign=0;
    num=0;
}

void add_edge(int u,int v)
{
    nxt[++num]=head[u];
    head[u]=num;
    ev[num]=v;
}

void dfs(int u,int fa)
{
    if(sign)return;
    vis[u]=1;
    for(int i=head[u]; i!=-1; i=nxt[i])
    {
        int v=ev[i];
        if(v==fa)continue;
        if(vis[v])sign=1;
        else dfs(v,u);
    }
}

struct E
{
    int state,step;
};
int c[maxn];
E que[(1<<21)+5];
void bfs()
{
    int fr=0,rr=0;
    f[(1<<n)-1]=0;
    E u,v;
    u.state=(1<<n)-1;
    u.step=0;
    que[rr++]=u;
    while(fr<rr)
    {
        u=que[fr++];
        int cur=0;
        for(int i=0; i<n; i++)c[i]=0;
        for(int i=0; i<n; i++)
            if(u.state&(1<<i))
            {
                for(int j=head[i]; j!=-1; j=nxt[j])
                {
                    cur|=(1<<ev[j]);
                    c[ev[j]]++;
                }
            }
        for(int i=0; i<n; i++)
        {
            v.state=cur;
            v.step=u.step+1;
            if(u.state&(1<<i))
            {
                for(int j=head[i]; j!=-1; j=nxt[j])
                {
                    c[ev[j]]--;
                    if(!c[ev[j]])v.state&=(~(1<<ev[j]));
                    c[ev[j]]++;
                }
            }
            // printf("** %d %d\n",u.state,v.state);
            /*for(int j=0; j<n; j++)
            {
                if(j==i)continue;
                if(u.state&(1<<j))
                {
                    for(int k=0; k<g[j].size(); k++)
                        v.state|=(1<<g[j][k]);
                }
            }*/
            if(f[v.state]!=-1)continue;
            f[v.state]=v.step;
            pnt[v.state][0]=u.state;
            pnt[v.state][1]=i;
            que[rr++]=v;
            if(v.state==0)return;
        }
    }
}

int main()
{
    while(scanf("%d%d",&n,&m))
    {
        if(n==0&&m==0)break;
        init();
        for(int i=1; i<=m; i++)
        {
            int u,v;
            scanf("%d%d",&u,&v);
            add_edge(u,v);
            add_edge(v,u);
        }
        dfs(0,-1);
        if(sign)printf("Impossible\n");
        else
        {
            bfs();
            if(f[0]==-1)printf("Impossible\n");
            else
            {
                printf("%d:",f[0]);
                vector<int>ans;
                int cur=0;
                while(cur!=(1<<n)-1)
                {
                    ans.push_back(pnt[cur][1]);
                    cur=pnt[cur][0];
                }
                for(int i=ans.size()-1; i>=0; i--)
                    printf(" %d",ans[i]);
                printf("\n");
            }
        }
    }
    return 0;
}
