/*
题意：给出一个串，给出26个字母的置换表，问经过若干次置换后原串字典序最小可以是多少
先求出置换，然后暴力枚举最后的转换关系，最后相当于验证x%c1=a1&&x%c2=a2...有没有解，
中国剩余定理，lcm(c1,c2...)范围内有解就有解，暴力验证就行
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
#include<sstream>
using namespace std;
#define eps 1e-8
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=1000005;
const int maxm=26;

int n,m;
char str[maxn],s[maxn];
int all;

int gcd(int x,int y)
{
    if(y==0)return x;
    return gcd(y,x%y);
}
int lcm(int x,int y)
{
    return x/gcd(x,y)*y;
}

struct P
{
    int val,step,len;
    P() {}
    P(int _val,int _step,int _len)
    {
        val=_val,step=_step,len=_len;
    }
    bool operator<(const P&a)const
    {
        return val<a.val;
    }
};
vector<P>circle[maxm];
int num,belong[maxm];
void init()
{
    m=strlen(str);
    num=0;
    for(int i=0; i<maxm; i++)circle[i].clear();
    memset(belong,-1,sizeof(belong));
    all=1;
    for(int i=0; i<m; i++)
    {
        //printf("** %d\n",i);
        if(belong[str[i]-'a']!=-1)continue;
        int cur=str[i]-'a';
        int cnt=0;
        while(belong[cur]==-1)
        {
            belong[cur]=num;
            circle[num].push_back(P(cur,cnt,0));
            cnt++;
            cur=s[cur]-'a';
        }
        all=all/gcd(all,cnt)*cnt;
        for(int j=0; j<circle[num].size(); j++)
            circle[num][j].len=cnt;
        ++num;
    }
    for(int i=0; i<num; i++)
        sort(circle[i].begin(),circle[i].end());
}

int path[maxm],ans[maxm];
bool test()
{
    // printf("** %d\n",all);
    for(int i=1; i<=all; i++)
    {
        bool sign=0;
        for(int j=0; j<num; j++)
            if(i%circle[j][0].len!=path[j])sign=1;
        if(!sign)return 1;
    }
    return 0;
}

bool dfs(int cnt)
{
    // printf("** %d %d\n",cnt,num);
    if(cnt==num)
    {
        if(test())return 1;
        return 0;
    }
    for(int i=0; i<circle[cnt].size(); i++)
    {
        path[cnt]=circle[cnt][i].step;
        if(dfs(cnt+1))return 1;
    }
    return 0;
}

int main()
{
    //freopen("in.cpp","r",stdin);
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%s%s",&n,str,s);

        // printf("****\n");

        init();

        // printf("****\n");

        dfs(0);

        //printf("** \n");

        for(int i=0; i<num; i++)
        {
            int tmp=path[i];
            for(int j=0; j<circle[i].size(); j++)
            {
                int tt=(circle[i][j].step+tmp)%circle[i][j].len;
                for(int k=0; k<circle[i].size(); k++)
                    if(circle[i][k].step==tt)
                    {
                        ans[circle[i][j].val]=circle[i][k].val;
                        break;
                    }
            }
        }
        for(int i=0; i<m; i++)
            printf("%c",ans[str[i]-'a']+'a');
        printf("\n");
    }
    return 0;
}
