#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
#include<queue>
using namespace std;
const int maxn = 21;
const int maxm = 94;
const int inf = 0x3fffffff;
typedef long long ll;

int f[maxn][maxm][maxm];
int a[maxn],n;
void pd(int &ret,int val) {
    if(ret==-1||ret>val)ret=val;
}

bool test(int m) {
    memset(f,-1,sizeof(f));
    f[0][0][0]=0;
    for(int i=0; i<n; i++)
        for(int j=0; j<maxm; j++)
            for(int k=0; k<maxm; k++) {
                if(f[i][j][k]==-1)continue;
                for(int r=0; r*9<=a[i+1]+9&&j+r<=m; r++)
                    for(int s=0; s*3+r*9<=a[i+1]+9&&k+s<=m&&r+s<=m; s++)
                        for(int p=0; p+s*3+r*9<=a[i+1]+9&&f[i][j][k]+p<=m&&r+s+p<=m; p++) {
                            if(p+s*3+r*9>=a[i+1]) {
                                pd(f[i+1][j+r][k+s],f[i][j][k]+p);
                            }
                        }
            }
    for(int i=0; i<maxm; i++)
        for(int j=0; j<maxm; j++)
            if(f[n][i][j]!=-1)return 1;
    return 0;
}

class Mutalisk {
public:
    int minimalAttacks(vector <int> x) {
        n=x.size();
        for(int i=1; i<=n; i++)a[i]=x[i-1];
        int l=1,r=93,ret=r;
        while(l<=r) {
            int m=(l+r)>>1;
            if(test(m)) {
                ret=m;
                r=m-1;
            } else l=m+1;
        }
        return ret;
    }
};
