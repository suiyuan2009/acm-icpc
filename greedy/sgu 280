/*
题意：n个节点的树，选择最少的点，使得所有点到选择点的最近距离不超过k。
总的思想就是从叶子节点开始向上，不得不选点的时候才选点
关键在于怎么判断当前是否必须选点
如果两个被选点的距离小于等于2*k+1,
那么连接他们的路径上的点都被覆盖了，
贪心的话当然是让这个距离尽量都等于2*k+1，
对每个节点记一个f[i]，
代表节点i到他子树中某个被选节点的距离，
首先叶子节点的f值为k+1，
其实是假设叶子节点下有个和他距离为k+1的被选择节点，
然后对于当前节点u，
记他的子孙中f的最大值为maxx，最小值为minn，
如果maxx+minn+2<=2*k+1，
说明当前子树中所有点都被覆盖了而且子树中被选点还要覆盖子树外的点，
基于这一点，我们应该置f[u]=minn+1，便于他的祖先计算f值，
如果maxx+minn+2>2*k+1，
说明当前子树中的点没有被覆盖完，
这些没有被覆盖完的点还等着他的某个祖先被选择后覆盖他，
所以此时应该置f[u]=maxx+1，
然后，如果f[u]==2*k+1，那么此时就必须选择u这个点了，并且置f[u]=0，
再不选择的话以u为子树的点就无法被覆盖完，
最后注意如果根节点的f值大于k，根节点必须选择。
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
using namespace std;
#define eps 1e-7
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=30005;
const ll mod=1000000007;

int n,k;
vector<int>g[maxn];
int f[maxn],ret;

void dfs(int u,int fa)
{
    int num=0;
    int minn=inf,maxx=-inf;
    for(int i=0; i<g[u].size(); i++)
    {
        int v=g[u][i];
        if(v==fa)continue;
        num++;
        dfs(v,u);
        minn=min(minn,f[v]);
        maxx=max(maxx,f[v]);
    }
    if(num==0)f[u]=k+1;
    else if(num==1)f[u]=minn+1;
    else
    {
        if(minn+maxx+2<=2*k+1)f[u]=minn+1;
        else f[u]=maxx+1;
    }
    if(f[u]==2*k+1)
    {
        ret++;
        f[u]=0;
    }
}

int main()
{
    scanf("%d%d",&n,&k);
    for(int i=1; i<n; i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,0);
    if(f[1]>k)ret++,f[1]=0;
    printf("%d\n",ret);
    for(int i=1; i<=n; i++)
        if(f[i]==0)printf("%d\n",i);
    return 0;
}
