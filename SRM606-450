/*
题意：给出5*10^7个数，内存16M，不相等的数配对，最多几对
如果存在绝对众数，那么是tot-cnt，否则是tot/2
"
我们把频数排成一排，
c_loud26
2014/1/30 14:51:57
最后要么剩下一个数，要么一个都不剩

suiyuan2009 2014/1/30 14:52:08
分成左右相等的两堆数

suiyuan2009 2014/1/30 14:52:19
频数和相等
14:52:44
suiyuan2009 2014/1/30 14:52:44
如果左右没有相同的元素，得证

suiyuan2009 2014/1/30 14:53:20
否则，相同的元素一定可以找到不互相配对的方案，因为不存在绝对众数
 
2014/1/30 14:53:50
为啥
c_loud26
2014/1/30 14:54:35
@suiyuan2009  证明好赞..
14:54:58
 
2014/1/30 14:54:58
还是不懂
c_loud26
2014/1/30 14:56:43
分成左右两堆数之后呢，如果左右有相同的元素，设为x(这里可以控制只会有一个相同的)...
14:58:00
c_loud26
2014/1/30 14:58:00
设被分到左边的x的个数为l，被分到右边的是r，那么l+r<总元素的一半，所以在右边的x一定可以在左边找到不是x的元素进行匹配
c_loud26
2014/1/30 14:58:41
同理左边的x一定也可以在右边找到不是x的数进行匹配。然后剩下的数，左右随便匹配...
c_loud26
2014/1/30 14:59:07
l+r<=总元素的一半

"
*/
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include <queue>
#include <map>
using namespace std;
const double eps = 1e-6;
typedef long long ll;
const double PI = acos(-1);
const int maxn = 55;
const int maxm = 1000000000;

int n;
class EllysPairing
{
public:
    int getMax(int M, vector <int> count, vector <int> first, vector <int> mult, vector <int> add)
    {
        int n = count.size();
        int cnt = 0, tot = 0, val = 0, v = 0;
        for (int i = 0; i < n; i++)tot += count[i];
        for (int i = 0; i < n; i++)
        {
            v = first[i];
            for (int j = 0; j < count[i]; j++)
            {
                if (cnt == 0)
                {
                    val = v;
                    cnt++;
                }
                else if (val == v)cnt++;
                else cnt--;
                v = (v * mult[i] + add[i]) & (M - 1);
            }
        }
        int cc = 0;
        for (int i = 0; i < n; i++)
        {
            v = first[i];
            for (int j = 0; j < count[i]; j++)
            {
                if (v == val)cc++;
                v = (v * mult[i] + add[i]) & (M - 1);
            }
        }
        return min(tot / 2, tot - cc);
    }
};
