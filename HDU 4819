/*
题意：
每次查询子矩阵的最大值和最小值，然后更新单点值
二维线段树
*/
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 805;
const int inf = 0x3fffffff;

int n, a[maxn][maxn];
struct  ST
{
    int l1, r1, l2, r2;
    int l, r;
    ST() {}
    ST(int _l1, int _r1, int _l2, int _r2)
    {
        l1 = _l1, r1 = _r1, l2 = _l2, r2 = _r2;
        l = inf, r = -inf;
    }
} st[maxn * 3][maxn * 3];

void sub_build(int id1, int id2, int l1, int r1, int l2, int r2)
{
    st[id1][id2] = ST(l1, r1, l2, r2);
    if (l2 == r2)
    {
        if (l1 == r1)st[id1][id2].l = st[id1][id2].r = a[l1][l2];
        else
        {
            st[id1][id2].l = min(st[id1 << 1][id2].l, st[id1 << 1 | 1][id2].l);
            st[id1][id2].r = max(st[id1 << 1][id2].r, st[id1 << 1 | 1][id2].r);
        }
        return;
    }
    int m = (l2 + r2) >> 1;
    sub_build(id1, id2 << 1, l1, r1, l2, m);
    sub_build(id1, id2 << 1 | 1, l1, r1, m + 1, r2);
    st[id1][id2].l = min(st[id1][id2 << 1].l, st[id1][id2 << 1 | 1].l);
    st[id1][id2].r = max(st[id1][id2 << 1].r, st[id1][id2 << 1 | 1].r);
}
void build(int id1, int id2, int l1, int r1, int l2, int r2)
{
    st[id1][id2] = ST(l1, r1, l2, r2);
    if (l1 == r1)
    {
        sub_build(id1, id2, l1, r1, l2, r2);
        return;
    }
    int m = (l1 + r1) >> 1;
    build(id1 << 1, id2, l1, m, l2, r2);
    build(id1 << 1 | 1, id2, m + 1, r1, l2, r2);
    sub_build(id1, id2, l1, r1, l2, r2);
}

void sub_pd(int id1, int id2, int x, int y, int val)
{
    if (st[id1][id2].l2 == st[id1][id2].r2)
    {
        if (st[id1][id2].l1 == st[id1][id2].r1)
            st[id1][id2].l = st[id1][id2].r = val;
        else
        {
            st[id1][id2].l = min(st[id1 << 1][id2].l, st[id1 << 1 | 1][id2].l);
            st[id1][id2].r = max(st[id1 << 1][id2].r, st[id1 << 1 | 1][id2].r);
        }
        return;
    }
    int m = (st[id1][id2].l2 + st[id1][id2].r2) >> 1;
    if (y <= m)sub_pd(id1, id2 << 1, x, y, val);
    else sub_pd(id1, id2 << 1 | 1, x, y, val);
    st[id1][id2].l = min(st[id1][id2 << 1].l, st[id1][id2 << 1 | 1].l);
    st[id1][id2].r = max(st[id1][id2 << 1].r, st[id1][id2 << 1 | 1].r);
}
void pd(int id1, int id2, int x, int y, int val)
{
    if (st[id1][id2].l1 == st[id1][id2].r1)
    {
        sub_pd(id1, id2, x, y, val);
        return;
    }
    int m = (st[id1][id2].l1 + st[id1][id2].r1) >> 1;
    if (x <= m)pd(id1 << 1, id2, x, y, val);
    else pd(id1 << 1 | 1, id2, x, y, val);
    sub_pd(id1, id2, x, y, val);
}

int mi, ma;
void sub_query(int id1, int id2, int l1, int r1, int l2, int r2)
{
    if (st[id1][id2].l2 == l2 && st[id1][id2].r2 == r2)
    {
        //if (st[id1][id2].l == inf)printf("%d %d %d %d\n", st[id1][id2].l1, st[id1][id2].r1, st[id1][id2].l2, st[id1][id2].r2);
        if (mi == -1 || mi > st[id1][id2].l)mi = st[id1][id2].l;
        if (ma == -1 || ma < st[id1][id2].r)ma = st[id1][id2].r;
        return;
    }
    int m = (st[id1][id2].l2 + st[id1][id2].r2) >> 1;
    if (r2 <= m)sub_query(id1, id2 << 1, l1, r1, l2, r2);
    else if (l2 > m)sub_query(id1, id2 << 1 | 1, l1, r1, l2, r2);
    else
    {
        sub_query(id1, id2 << 1, l1, r1, l2, m);
        sub_query(id1, id2 << 1 | 1, l1, r1, m + 1, r2);
    }
}
void query(int id1, int id2, int l1, int r1, int l2, int r2)
{
    if (st[id1][id2].l1 == l1 && st[id1][id2].r1 == r1)
    {
        sub_query(id1, id2, l1, r1, l2, r2);
        return;
    }
    int m = (st[id1][id2].l1 + st[id1][id2].r1) >> 1;
    if (r1 <= m)query(id1 << 1, id2, l1, r1, l2, r2);
    else if (l1 > m)query(id1 << 1 | 1, id2, l1, r1, l2, r2);
    else
    {
        query(id1 << 1, id2, l1, m, l2, r2);
        query(id1 << 1 | 1, id2, m + 1, r1, l2, r2);
    }
}

void f(int &x)
{
    if (x < 1)x = 1;
    if (x > n)x = n;
}

int main()
{
    //freopen("in.cpp", "r", stdin);
    //freopen("out.cpp", "w", stdout);
    int T, ncase = 0;
    scanf("%d", &T);
    while (T--)
    {
        scanf("%d", &n);
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++)
            {
                scanf("%d", &a[i][j]);
                // pd(1, 1, i, j, a[i][j]);
            }
        build(1, 1, 1, n, 1, n);
        printf("Case #%d:\n", ++ncase);
        int m;
        scanf("%d", &m);
        for (int i = 1; i <= m; i++)
        {
            int x, y, len;
            scanf("%d%d%d", &x, &y, &len);
            int l1 = x - len / 2, r1 = x + len / 2;
            int l2 = y - len / 2, r2 = y + len / 2;
            f(l1), f(r1), f(l2), f(r2);
            mi = ma = -1;
            query(1, 1, l1, r1, l2, r2);
            printf("%d\n", (mi + ma) / 2);
            pd(1, 1, x, y, (mi + ma) / 2);
        }
    }
    return 0;
}
