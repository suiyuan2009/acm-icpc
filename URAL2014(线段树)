/*
题意：给出一些时刻下一个人赚的或者花的钱，这个人会先花掉赚的钱，如果不够就借，但是借的钱不还，问当前给的这些信息的条件下借了多少钱
这题断断续续想了好几天，一开始一直想用set贪心删除，发现不行之后怎么也想不出用什么维护一段一段的和为负数的区间，
完全靠灵感做出来的，记线段树每个节点表示这段区间一开始负数，后来正数，负数的和x以及正数的和y。
*/
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<vector>
#include<cmath>
#include<set>
using namespace std;
typedef long long ll;
const int maxn = 100005;

char str[maxn];
int cal_1() {
    int len = strlen(str);
    int ret = 0;
    for(int i = 1; i < len; i++)ret = ret * 10 + str[i] - '0';
    if(str[0] == '-')ret = -ret;
    return ret;
}
int cal_2() {
    int x = (str[0] - '0') * 10 + str[1] - '0';
    int y = (str[3] - '0') * 10 + str[4] - '0';
    return (y * 31 + x) * 24 * 60;
}
int cal_3() {
    int x = (str[0] - '0') * 10 + str[1] - '0';
    int y = (str[3] - '0') * 10 + str[4] - '0';
    return x * 60 + y;
}

struct ST{
    int l,r;
    ll x,y;
}st[maxn*4];
void build(int id,int l,int r){
    st[id].l=l,st[id].r=r;
    if(l==r)return;
    int m=(l+r)>>1;
    build(id<<1,l,m),build(id<<1|1,m+1,r);
}
void upd(int id,int pos,int val){
    if(st[id].l==st[id].r){
        if(val>0)st[id].y=val;
        else st[id].x=val;
        return;
    }
    int m=(st[id].l+st[id].r)>>1;
    if(pos<=m)upd(id<<1,pos,val);
    else upd(id<<1|1,pos,val);
    if(st[id<<1].y+st[id<<1|1].x>=0){
        st[id].x=st[id<<1].x;
        st[id].y=st[id<<1].y+st[id<<1|1].x+st[id<<1|1].y;
    }else{
        st[id].x=st[id<<1].x+st[id<<1].y+st[id<<1|1].x;
        st[id].y=st[id<<1|1].y;
    }
}

int n;
struct P{
    int ti,val;
}p[maxn];
vector<int>vis;
void init(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%s",str);
        int val=cal_1();
        scanf("%s",str);
        int ti=cal_2();
        scanf("%s",str);
        ti+=cal_3();
        p[i].ti=ti,p[i].val=val;
        vis.push_back(ti);
    }
    sort(vis.begin(),vis.end());
    for(int i=1;i<=n;i++)p[i].ti=lower_bound(vis.begin(),vis.end(),p[i].ti)-vis.begin()+1;
    build(1,1,n);
}

int main() {
    //freopen("ACM/in.in", "r", stdin);
    init();
    for(int i=1;i<=n;i++){
        upd(1,p[i].ti,p[i].val);
        printf("%lld\n",st[1].x);
    }
    return 0;
}
