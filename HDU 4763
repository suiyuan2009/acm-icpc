/*
题意：给出一个串S，找出最长的E，使得S=E+X+E+X+E，其中X随意
扩展kmp求最长公共前缀，然后从大到小枚举后缀的长度，
l,r指针分别指向现在中间一段可以选择的区间的左右端点，
每次长度--后l--,r+=2，更新最大值即可
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef __int64 ll;
const int inf=0x3f3f3f3f;
const int maxn=1000005;

int extend[maxn];
int next[maxn];
char s[maxn];
char t[maxn];
int cnt;
bool vis[maxn];

int ExtendKmp(char s[],char t[]) {
    //s是母串，t是子串
    int ls=strlen(s);
    int lt=strlen(t);
    int i,j,k;
    int Len,L;
    j=0;
    while(t[j+1]==t[j]&&j+1<lt)
        j++;
    next[1]=j,k=1;//求next[]数组；
    for(i=2; i<lt; i++) {
        Len=k+next[k],L=next[i-k];
        if(Len>L+i) next[i]=L;
        else {
            j=Len-i>0?Len-i:0;
            while(t[i+j]==t[j]&&i+j<lt) j++;
            next[i]=j,k=i;
        }
    }
    j=0;
    while(s[j]==t[j]&&j<lt&&j<ls)
        j++;
    extend[0]=j,k=0;
    if(extend[0]==lt)cnt++;
    for(i=1; i<ls; i++) {
        Len=k+extend[k],L=next[i-k];
        if(Len>L+i) extend[i]=L;
        else {
            j=Len-i>0?Len-i:0;
            while(s[i+j]==t[j]&&i+j<ls&&j<lt)
                j++;
            extend[i]=j,k=i;
            if(extend[i]==lt)
                cnt++;
        }
    }
    return 0;
}

int main() {
//freopen("in.cpp","r",stdin);
    int TT;
    scanf("%d",&TT);
    while(TT--) {
        cnt=0;
        scanf("%s",s);
        ExtendKmp(s,s);
        int ret=0;
        int len=strlen(s);
        int cur=0;
        int l=-1,r=-1;
        for(int i=0; i<len; i++) {
            if(3*i<2*len)continue;
            if(l==-1) {
                l=r=len-i;
                cur=max(cur,extend[l]);
            } else {
                l--;
                cur=max(cur,extend[l]);
                r++;
                cur=max(cur,extend[r]);
                r++;
                cur=max(cur,extend[r]);
            }
            if(cur>=len-i&&extend[i]==len-i) {
                ret=len-i;
                break;
            }
        }
        printf("%d\n",ret);
    }
    return 0;
}
