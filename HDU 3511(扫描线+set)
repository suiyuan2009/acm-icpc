/*
题意：求圆嵌套最大次数

扫描线，每次找最近的其他圆，根据嵌套次数判断，set的排序函数在now不断变大的情况下还是保持之前的排序的，因为没有嵌套
*/
//#pragma comment(linker,"/STACK:10240000000,10240000000")
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
#include<set>
using namespace std;
const int maxn =50005;
const int inf = 0x3fffffff;
typedef long long ll;

int n,now,f[maxn];
struct C{
    int x,y,r;
}c[maxn];
struct E{
    int x,y,z,id;
    E(){}
    E(int x,int y,int z,int id):x(x),y(y),z(z),id(id){}
    bool operator<(const E&a)const{
        return x<a.x||(x==a.x&&y<a.y);
    }
}e[maxn+maxn];
struct P{
    int id,z;
    P(){}
    P(int id,int z):id(id),z(z){}
    bool operator<(const P&a)const{
        double tt=sqrt((double)c[id].r*c[id].r-(double)(now-c[id].x)*(now-c[id].x));
        double y1=c[id].y+(z?tt:-tt);
        tt=sqrt((double)c[a.id].r*c[a.id].r-(double)(now-c[a.id].x)*(now-c[a.id].x));
        double y2=c[a.id].y+(a.z?tt:-tt);
        return y1<y2||(y1==y2&&z<a.z);
    }
};
set<P>s;
set<P>::iterator it,l,r;

void init(){
    for(int i=1;i<=n;i++){
        int x,y,r;
        scanf("%d%d%d",&x,&y,&r);
        c[i].x=x,c[i].y=y,c[i].r=r;
        e[i*2-1]=E(c[i].x-c[i].r,c[i].y,0,i);
        e[i*2]=E(c[i].x+c[i].r,c[i].y,1,i);
    }
    sort(e+1,e+n+n+1);
    s.clear();
}

void solve(){
    for(int i=1;i<=n+n;i++){
        now=e[i].x;
        if(e[i].z){
            s.erase(P(e[i].id,0));
            s.erase(P(e[i].id,1));
        }else{
            it=s.insert(P(e[i].id,0)).first;
            l=r=it;
            r++;
            if(it==s.begin()||r==s.end())f[e[i].id]=1;
            else{
                l--;
                if(l->id==r->id)f[e[i].id]=f[l->id]+1;
                else f[e[i].id]=max(f[l->id],f[r->id]);
            }
            s.insert(P(e[i].id,1));
        }
    }
}

int main(){
    //freopen("ACM/in.in","r",stdin);
    while(~scanf("%d",&n)){
        init();
        solve();
        int ret=0;
        for(int i=1;i<=n;i++)ret=max(ret,f[i]);
        printf("%d\n",ret);
    }
    return 0;
}
