/*
题意：一个轴上有n个东西或者空隙，给出他们的宽度，能移走东西当且仅当左右空隙宽度和大于等于东西宽度和，问最少需要移走
多少东西

栈+并查集+DP+TWOPOINT
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<stack>
#include<cmath>
#include<map>
using namespace std;;
const int maxn=1000005;
typedef long long ll;

int n,a[maxn],m,pnt[maxn],f[maxn];

pair<int,ll>s[maxn];
int top;

void init(){
    for(int i=0;i<=n+1;i++){
        pnt[i]=i,f[i]=-1;
    }
    top=0;
}

int pd(int x){
  if(pnt[x]!=x)pnt[x]=pd(pnt[x]);
  return pnt[x];
}

int cnt;
void upd(){
    while(top>1){
        bool sign=0;
        if(s[top].second+s[top-1].second<=0){
            sign=1;
            if(s[top-1].second<0){
                if(s[top].second>0)cnt++;
                if(top==2)f[s[top].first]=cnt;
                ll tt=s[top-1].second;
                if(s[top].second<0)tt+=s[top].second;
                else tt-=s[top].second;
                if(top>2)pnt[s[top].first]=s[top-1].first;
                s[top-1]=make_pair(s[top-1].first,tt);
                top--;
            }
            else{
                ll tt=-s[top-1].second;
                if(s[top].second<0)tt+=s[top].second;
                else tt-=s[top].second;
                cnt++;
                pnt[s[top].first]=s[top-1].first;
                if(top==2)f[s[top-1].first]=cnt;
                s[top-1]=make_pair(s[top-1].first,tt);
                top--;
            }
            continue;
        }
        if(top>=3&&s[top].second+s[top-1].second+s[top-2].second<=0){
            sign=1;
            ll tt=s[top].second-s[top-1].second+s[top-2].second;
            cnt++;
            if(top==3){
                pnt[s[top].first]=s[top-1].first;
                f[s[top-1].first]=cnt;
            }
            else{
                pnt[s[top].first]=s[top-2].first;
                pnt[s[top-1].first]=s[top-2].first;
            }
            s[top-2]=make_pair(s[top-2].first,tt);
            top-=2;
        }
        if(!sign)break;
    }
}

int main(){
 //   freopen("ACM/in.in","r",stdin);
    //freopen("ACM/out.out","w",stdout);
    int T;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&n,&m);
        for(int i=1;i<=n;i++)scanf("%d",&a[i]);
        a[0]=a[n+1]=-maxn;
        init();
        cnt=0;
        for(int i=m-1;i>=0;i--){
            s[++top]=make_pair(i,a[i]);
            upd();
        }
        cnt=0,top=0;
        for(int i=m+1;i<=n+1;i++){
            s[++top]=make_pair(i,a[i]);
            upd();
        }
        for(int i=0;i<=n+1;i++){
            if(i==m)continue;
            int x=pd(i);
            if(f[x]==-1)f[i]=0;
            else f[i]=f[x];
        }
        f[m]=0;
      // printf("**\n");
        // for(int i=1;i<=n;i++)printf("%d %d\n",i,f[i]);
       int ret=min(f[0],f[n+1]);
        ll cur=0;
        int pos=1,r=m;
        for(int i=m-1;i>=1;i--){
            if(a[i]>0)cur+=a[i];
            else cur-=a[i];
            if(cur>=a[m]){
                pos=i;
                break;
            }
        }
       // printf("** %d\n",pos);
        for(int i=pos;i<=m;i++){
            while(cur<a[m]&&r<n){
                if(a[r+1]<0)cur-=a[r+1];
                else cur+=a[r+1];
                r++;
            }
          //  printf("%d %d: %d\n",i,r,f[i]+f[r]);
            if(cur>=a[m])ret=min(ret,f[i]+f[r]);
            if(a[i]>0)cur-=a[i];
            else cur+=a[i];
        }
        printf("%d\n",ret+1);
    }
    return 0;
}
