/*
轮廓线dp
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
#include<stack>
#include<cmath>
#include<map>
using namespace std;
typedef long long ll;
const int maxm=10;
const int maxn=105;
const int mod=1000000007;

int f[2][1<<maxm][25],n,m,c,d;
char str[maxn][maxm+10];

void pd(int &ret,int val){
    ret+=val;
    if(ret>=mod)ret-=mod;
}

int main(){
    //freopen("ACM/in.in","r",stdin);
    //freopen("ACM/out.out","w",stdout);
    while(~scanf("%d%d%d%d",&n,&m,&c,&d)){
        memset(f,0,sizeof(f));
        for(int i=0;i<n;i++)scanf("%s",str[i]);
        int cur=0;
        f[cur][(1<<m)-1][0]=1;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++){
                cur^=1;
                memset(f[cur],0,sizeof(f[cur]));
                for(int k=0;k<(1<<m);k++)
                    for(int r=0;r<=d;r++){
                        if(k&(1<<j)){
                            if(str[i][j]=='0')pd(f[cur][k][r],f[1-cur][k][r]);
                            else{
                                if(j&&(!(k&(1<<j-1))))pd(f[cur][k|(1<<j-1)][r],f[1-cur][k][r]);
                                if(r<d)pd(f[cur][k][r+1],f[1-cur][k][r]);
                                pd(f[cur][k^(1<<j)][r],f[1-cur][k][r]);
                            }
                        }
                        else{
                           if(str[i][j]!='0')pd(f[cur][k|(1<<j)][r],f[1-cur][k][r]);
                        }
                    }
            }
        int ret=0;
        for(int i=c;i<=d;i++){
            pd(ret,f[cur][(1<<m)-1][i]);
           // printf("%d: %d\n",i,f[cur][(1<<m)-1][i]);
        }
        printf("%d\n",ret);
    }
    return 0;
}
