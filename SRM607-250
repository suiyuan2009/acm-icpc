/*
题意：给一个串，?处字母随机，问回文串期望个数
方向是计算总共可以有多少回文串
*/
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include <queue>
#include <map>
#include <iostream>
using namespace std;
const double eps = 1e-6;
typedef long long ll;
const double PI = acos(-1);
const int maxn = 105;
const int maxm = 1005;
const int inf = 0x3fffffff;

string a;
class PalindromicSubstringsDiv1
{
public:
    double expectedPalindromes(vector <string> S1, vector <string> S2)
    {
        a.clear();
        for (int i = 0; i < S1.size(); i++)
            a += S1[i];
        for (int i = 0; i < S2.size(); i++)
            a += S2[i];
        //cout << a << endl;
        int n = a.size();
        double ret = 0;
        for (int i = 0; i < n; i++)
        {
            double ans = 1;
            for (int j = 0; j < n; j++)
            {
                if (i - j < 0 || i + j >= n)break;
                if (a[i - j] == a[i + j])
                {
                    if (j&&a[i - j] == '?')ans /= 26;
                }
                else
                {
                    if (a[i - j] != '?' && a[i + j] != '?')ans = 0;
                    else ans /= 26;
                }
                ret += ans;
            }
            ans = 1;
            for (int j = 0; j < n; j++)
            {
                if (i - j < 0 || i + j + 1 >= n)break;
                if (a[i - j] == a[i + j + 1])
                {
                    if (a[i - j] == '?')
                        ans /= 26;
                }
                else
                {
                    if (a[i - j] != '?' && a[i + j + 1] != '?')ans = 0;
                    else ans /= 26;
                }
                ret += ans;
            }
        }
        return ret;
    }
};
