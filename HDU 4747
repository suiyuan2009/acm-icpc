/*
题意：求所有区间的mex值，mex代表区间中第一个没出现的整数
先预处理出所有的mex(1,i)，以及nxt[i]，表示向右第一个和i位置值相等的位置，
然后枚举区间的左端点，
区间左端点从i移动到i+1时，mex值需要修改的是pos<nxt[i]且mex>a[i]的位置，
全部赋值为a[i]，所以只需区间整体赋值以及区间求和操作
*/
//#pragma comment(linker, "/STACK:102400000,102400000")
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
#include<cmath>
#include<map>
#include<queue>
#include<stack>
#include<iomanip>
using namespace std;
#define eps 1e-8
typedef double ldb;
typedef __int64 ll;
const int inf=0x3f3f3f3f;
const int maxn=200005;
const int mod=1000000007;

int n,a[maxn];
map<int,int>mp;
int nxt[maxn];
bool vis[maxn];

struct ST
{
    int l,r;
    ll val,sum;
} st[maxn*3];

void build(int id,int l,int r)
{
    st[id].l=l,st[id].r=r,st[id].val=0,st[id].sum=-1;
    if(l==r)return;
    int m=(l+r)/2;
    build(id*2,l,m);
    build(id*2+1,m+1,r);
}

void down(int id)
{
    if(st[id].val==-1)return;
    st[id*2].val=st[id*2+1].val=st[id].val;
    st[id*2].sum=st[id*2+1].sum=-1;
}

void up(int id)
{
    if(st[id*2].val==st[id*2+1].val&&st[id*2].val!=-1)
    {
        st[id].val=st[id*2].val;
        st[id].sum=-1;
    }
    else
    {
        st[id].val=-1;
        st[id].sum=0;
        if(st[id*2].val==-1)st[id].sum+=st[id*2].sum;
        else st[id].sum+=st[id*2].val*(st[id*2].r-st[id*2].l+1);
        if(st[id*2+1].val==-1)st[id].sum+=st[id*2+1].sum;
        else st[id].sum+=st[id*2+1].val*(st[id*2+1].r-st[id*2+1].l+1);
    }
}

void update(int id,int l,int r,ll val)
{
    if(st[id].l==l&&st[id].r==r)
    {
        st[id].val=val;
        st[id].sum=-1;
        return;
    }
    down(id);
    int m=(st[id].l+st[id].r)/2;
    if(r<=m)update(id*2,l,r,val);
    else if(l>m)update(id*2+1,l,r,val);
    else
    {
        update(id*2,l,m,val);
        update(id*2+1,m+1,r,val);
    }
    up(id);
}

ll query(int id,int l,int r)
{
    if(st[id].val!=-1)return st[id].val*(r-l+1);
    if(st[id].l==l&&st[id].r==r)
    {
        if(st[id].val==-1)return st[id].sum;
        return st[id].val*(st[id].r-st[id].l+1);
    }
    down(id);
    int m=(st[id].l+st[id].r)/2;
    if(r<=m)return query(id*2,l,r);
    else if(l>m)return query(id*2+1,l,r);
    return query(id*2,l,m)+query(id*2+1,m+1,r);
}

void init()
{
    mp.clear();
    memset(vis,0,sizeof(vis));
    for(int i=1; i<=n; i++)scanf("%d",&a[i]);
    for(int i=n; i>=1; i--)
    {
        int tt=mp[a[i]];
        mp[a[i]]=i;
        if(!tt)nxt[i]=n+1;
        else nxt[i]=tt;
    }
    build(1,1,n);
    int pos=0;
    for(int i=1; i<=n; i++)
    {
        if(a[i]<=n)vis[a[i]]=1;
        while(vis[pos])pos++;
        update(1,i,i,pos);
    }
    //printf("%d\n",query(1,1,3));
}


int main()
{
    //freopen("in.cpp","r",stdin);
    while(scanf("%d",&n)&&n)
    {
        init();
        ll ret=0;
        for(int i=1; i<=n; i++)
        {
            ret+=query(1,i,n);
            //printf("** %I64d\n",ret);
            int l=i,r=nxt[i]-1;
            int ans=nxt[i];
            while(l<=r)
            {
                int m=(l+r)/2;
                ll tt=query(1,m,m);
                if(tt>a[i])
                {
                    ans=m;
                    r=m-1;
                }
                else l=m+1;
            }
            if(ans!=nxt[i])
            {
                //printf("** %d %d %d\n",ans,nxt[i]-1,a[i]);
                update(1,ans,nxt[i]-1,a[i]);
            }
        }
        printf("%I64d\n",ret);
    }
    return 0;
}
