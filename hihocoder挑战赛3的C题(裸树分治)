/*
题意：给一棵树，多次询问距离v不超过r的权值最大点
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<iostream>
#include<queue>
using namespace std;
typedef long long ll;
const int maxn=100005;
const int mod=1000000007;

vector<pair<int,int> >query[maxn];
int ans[maxn];
int n,m,head[maxn],ev[maxn+maxn],num,nxt[maxn+maxn],ew[maxn+maxn],a[maxn];
void addedge(int u,int v,int w){
    nxt[++num]=head[u];
    head[u]=num;
    ev[num]=v,ew[num]=w;
}

bool rooted[maxn];
queue<int>que;
int pnt[maxn],d[maxn];
int pd2(int st){
    int ret=0,id=st;
    while(!que.empty())que.pop();
    d[st]=0,pnt[st]=-1,que.push(st);
    while(!que.empty()){
        int u=que.front();
        que.pop();
        for(int i=head[u];i;i=nxt[i]){
            int v=ev[i];
            if(rooted[v]||pnt[u]==v)continue;
            d[v]=d[u]+1,pnt[v]=u;
            que.push(v);
            if(d[v]>ret){
                ret=d[v],id=v;
            }
        }
    }
    //printf("****\n");
    return id;
}
int pd(int st){
    int l=pd2(st),r=pd2(l);
    int dis=d[r]/2;
    while(dis--)r=pnt[r];
    //printf("&&\n");
    return r;
}

struct P{
    int v,d;
    P(){}
    P(int v,int d):v(v),d(d){}
    bool operator<(const P&a)const{
        return d<a.d;
    }
}s[maxn];
int cs;
int mx[maxn],idx[maxn];
void dfs2(int u,int fa){
//printf("** %d\n",u);
    s[++cs]=P(u,d[u]);
    for(int i=head[u];i;i=nxt[i]){
        int v=ev[i],w=ew[i];
        if(v==fa||rooted[v])continue;
        d[v]=d[u]+w;
        dfs2(v,u);
    }
}

void dfs(int u){
    //printf("** %d\n",u);
    u=pd(u);
    rooted[u]=1,cs=d[u]=0;
    dfs2(u,0);
    //printf("**\n");
    sort(s+1,s+cs+1);
    mx[1]=a[s[1].v],idx[1]=s[1].v;
    for(int i=2;i<=cs;i++)
        if(mx[i-1]<a[s[i].v]||(mx[i-1]==a[s[i].v]&&idx[i-1]>s[i].v)){
            mx[i]=a[s[i].v],idx[i]=s[i].v;
        }else{
            mx[i]=mx[i-1],idx[i]=idx[i-1];
        }
    for(int i=1;i<=cs;i++){
        int v=s[i].v,w=s[i].d;
        for(int j=0;j<query[v].size();j++){
            int id=query[v][j].first;
            int rr=query[v][j].second;
            if(rr>=d[v]){
                rr-=d[v];
                int l=1,r=cs,ret=-1;
                while(l<=r){
                    int m=(l+r)>>1;
                    if(s[m].d<=rr){
                        ret=m;
                        l=m+1;
                    }else r=m-1;
                }
                if(ret!=-1){
                    if(a[ans[id]]<mx[ret]||(a[ans[id]]==mx[ret]&&idx[ret]<ans[id]))
                        ans[id]=idx[ret];
                }
            }
        }
    }
    for(int i=head[u];i;i=nxt[i]){
        int v=ev[i];
        if(rooted[v])continue;
        dfs(v);
    }
}

int main(){
    //freopen("in.in","r",stdin);
    scanf("%d",&n);
    a[0]=-1;
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    for(int i=1;i<n;i++){
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        addedge(u,v,w),addedge(v,u,w);
    }
    scanf("%d",&m);
    for(int i=1;i<=m;i++){
        int id,d;
        scanf("%d%d",&id,&d);
        query[id].push_back(make_pair(i,d));
    }
    dfs(1);
    for(int i=1;i<=m;i++)printf("%d\n",ans[i]);
    return 0;
}
