#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
using namespace std;
typedef long long ll;
const int maxn = 55;
const int maxm = 10005;
const int inf = 0x3fffffff;

int f[maxm][maxn];
int n, c[maxn], a[maxn][maxn], vis[maxn];
void pd(int &ret, int val)
{
    if (ret == -1 || ret > val)ret = val;
}

int main()
{
    // freopen("in.cpp", "r", stdin);
    int ncase = 0;
    while (~scanf("%d", &n))
    {
        for (int i = 1; i <= n; i++)
        {
            c[i] = 0;
            int x;
            scanf("%d", &x);
            for (int j = 1; j <= x; j++)
            {
                int y;
                scanf("%d", &y);
                if (c[i] && a[i][c[i]] == y)continue;
                a[i][++c[i]] = y;
            }
        }
        memset(f, -1, sizeof(f));
        for (int i = 1; i <= n; i++)f[0][i] = 0;
        for (int i = 0; i < maxm - 1; i++)
            for (int j = 1; j <= n; j++)
            {
                if (f[i][j] == -1)continue;
                for (int k = 1; k <= n; k++)vis[k] = 0;
                bool sign = 0;
                int cnt = 0, cnt2 = 0;
                for (int k = 1; k <= c[j]; k++)
                    if (a[j][k] == i + 1)
                    {
                        if (k > 1)sign = 1;
                        break;
                    }
                for (int k = 1; k <= n; k++)
                    for (int r = 1; r <= c[k]; r++)
                        if (a[k][r] == i + 1)
                        {
                            vis[k] = 1;
                            cnt2++;
                            if (r < c[k])cnt++;
                        }
                if (sign)
                {
                    if (cnt2 == 1)pd(f[i + 1][j], f[i][j] + cnt - 1);
                    else
                    {
                        for (int k = 1; k <= n; k++)
                            if (vis[k])
                            {
                                if (k == j)pd(f[i + 1][j], f[i][j] + cnt);
                                else pd(f[i + 1][k], f[i][j] + cnt - 1);
                            }
                    }
                }
                else
                {
                    if (!cnt2)pd(f[i + 1][j], f[i][j]);
                    else
                    {
                        for (int k = 1; k <= n; k++)
                            if (vis[k])pd(f[i + 1][k], f[i][j] + cnt);
                    }
                }
            }
        int ret = -1;
        for (int i = 1; i <= n; i++)
            if (f[maxm - 1][i] != -1)pd(ret, f[maxm - 1][i]);
        printf("Case %d: %d\n", ++ncase, ret * 2 + n - 1);
    }
    return 0;
}
