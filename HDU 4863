/*
题意：定义cc[i]为一棵树如果以i为根，子树中点数最多的有cc[i]个节点，一颗数中cc[i]值最小的就是质心，给一棵树，同质心的有多少棵子树
记f[i][j]代表以i为根的子树中有j+1个节点的子树有多少种，
如果质心只有一个，那么满足cc[i]<=n-cc[i]-1，先求出所有可能的子树，然后减去不符合的情况，利用背包。
如果质心有两个，那么枚举两边节点个数就行，两边的节点个数是一样的。
*/
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
using namespace std;
typedef long long ll;
const int maxn = 205;
const int inf = 0x3fffffff;
const int mod = 10007;

int c[maxn], n, cc[maxn];
vector<int>g[maxn], ct;
bool is[maxn];
int f[maxn][maxn];

void init()
{
    memset(f, 0, sizeof(f));
    ct.clear();
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        g[i].clear();
        c[i] = is[i] = cc[i] = 0;
    }
    for (int i = 1; i < n; i++)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
}

void dfs(int u, int fa)
{
    c[u] = 1;
    int maxx = 0;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == fa)continue;
        dfs(v, u);
        maxx = max(maxx, c[v]);
        c[u] += c[v];
    }
    maxx = max(maxx, n - c[u]);
    cc[u] = maxx;
}

void dfs2(int u, int fa)
{
    c[u] = 1;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == fa || is[v])continue;
        dfs2(v, u);
        c[u] += c[v];
    }
}

vector<int>a;
int dp[maxn][maxn], sum, m;

void solve(int jp)
{
    m = a.size();
    for (int i = 0; i <= m; i++)
        for (int j = 0; j <= sum; j++)
            dp[i][j] = 0;
    dp[0][0] = 1;
    for (int i = 0; i < m; i++)
    {
        if (i == jp)
        {
            for (int j = 0; j <= sum; j++)dp[i + 1][j] = dp[i][j];
            continue;
        }
        for (int j = 0; j <= sum; j++)
        {
            if (dp[i][j] == 0)continue;
            for (int k = 0; k <= c[a[i]]; k++)
            {
                if (j + k > sum)break;
                if (k == 0)dp[i + 1][j] += dp[i][j];
                else dp[i + 1][j + k] += dp[i][j] * f[a[i]][k - 1] % mod;
                if (dp[i + 1][j + k] >= mod)dp[i + 1][j + k] -= mod;
            }
        }
    }
}

void dfs3(int u, int fa)
{
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == fa || is[v])continue;
        dfs3(v, u);
    }
    a.clear();
    sum = 0;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == fa || is[v])continue;
        a.push_back(v);
        sum += c[v];
    }
    solve(maxn);
    for (int i = 0; i <= sum; i++)f[u][i] = dp[m][i];
}

int main()
{
   // freopen("in.cpp", "r", stdin);
    //freopen("out.cpp", "w", stdout);
    int T, ncase = 0;
    scanf("%d", &T);
    while (T--)
    {
        init();
        dfs(1, 0);
        int maxx = maxn;
        for (int i = 1; i <= n; i++)
            maxx = min(maxx, cc[i]);
        for (int i = 1; i <= n; i++)
            if (cc[i] == maxx)
            {
                ct.push_back(i);
                is[i] = 1;
            }
        int cnt = ct.size();
        for (int i = 0; i < cnt; i++)
        {
            dfs2(ct[i], 0);
            dfs3(ct[i], 0);
        }
        int ret = 0;
        if (cnt == 1)
        {
            int u = ct[0];
            for (int i = 0; i < c[u]; i++)
            {
                ret += f[u][i];
                if (ret >= mod)ret -= mod;
            }
            a.clear();
            for (int i = 0; i < g[u].size(); i++)
            {
                int v = g[u][i];
                if (is[v])continue;
                a.push_back(v);
            }
            m = a.size();
            for (int i = 1; i < c[u]; i++)
                for (int j = 0; j < m; j++)
                {
                    if (c[a[j]] < i)continue;
                    sum = i - 1;
                    solve(j);
                    int tt=0;
                    for (int k = 0; k <= sum; k++)
                    {
                        tt+=dp[m][k];
                        if (tt >= mod)tt -= mod;
                    }
                    ret=ret+mod-tt*f[a[j]][i-1]%mod;
                    if(ret>=mod)ret-=mod;
                }
        }
        else
        {
            int u0 = ct[0], u1 = ct[1];
            for (int i = 0; i < min(c[u0], c[u1]); i++)
            {
                ret += f[u0][i] * f[u1][i] % mod;
                if (ret >= mod)ret -= mod;
            }
        }
        printf("Case %d: %d\n", ++ncase, ret);
    }
    return 0;
}
